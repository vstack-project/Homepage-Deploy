{"version":3,"file":"static/js/738.9bb7e9ad.chunk.js","mappings":"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","sources":["../node_modules/@noble/hashes/src/_assert.ts","../node_modules/@noble/hashes/src/crypto.ts","../node_modules/@noble/hashes/src/utils.ts","../node_modules/@noble/hashes/src/_sha2.ts","../node_modules/@noble/hashes/src/sha256.ts","../node_modules/@noble/curves/src/abstract/modular.ts","../node_modules/@noble/curves/src/abstract/curve.ts","../node_modules/@noble/curves/src/abstract/weierstrass.ts","../node_modules/@noble/hashes/src/hmac.ts","../node_modules/@noble/curves/src/_shortw_utils.ts","../node_modules/@noble/curves/src/secp256k1.ts"],"sourcesContent":["export function number(n: number) {\n  if (!Number.isSafeInteger(n) || n < 0) throw new Error(`Wrong positive integer: ${n}`);\n}\n\nexport function bool(b: boolean) {\n  if (typeof b !== 'boolean') throw new Error(`Expected boolean, not ${b}`);\n}\n\nexport function bytes(b: Uint8Array | undefined, ...lengths: number[]) {\n  if (!(b instanceof Uint8Array)) throw new Error('Expected Uint8Array');\n  if (lengths.length > 0 && !lengths.includes(b.length))\n    throw new Error(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\n}\n\ntype Hash = {\n  (data: Uint8Array): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create: any;\n};\nexport function hash(hash: Hash) {\n  if (typeof hash !== 'function' || typeof hash.create !== 'function')\n    throw new Error('Hash should be wrapped by utils.wrapConstructor');\n  number(hash.outputLen);\n  number(hash.blockLen);\n}\n\nexport function exists(instance: any, checkFinished = true) {\n  if (instance.destroyed) throw new Error('Hash instance has been destroyed');\n  if (checkFinished && instance.finished) throw new Error('Hash#digest() has already been called');\n}\nexport function output(out: any, instance: any) {\n  bytes(out);\n  const min = instance.outputLen;\n  if (out.length < min) {\n    throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n  }\n}\n\nconst assert = {\n  number,\n  bool,\n  bytes,\n  hash,\n  exists,\n  output,\n};\n\nexport default assert;\n","// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// See utils.ts for details.\ndeclare const globalThis: Record<string, any> | undefined;\nexport const crypto =\n  typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;\n","/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated, we can just drop the import.\nimport { crypto } from '@noble/hashes/crypto';\n\n// prettier-ignore\nexport type TypedArray = Int8Array | Uint8ClampedArray | Uint8Array |\n  Uint16Array | Int16Array | Uint32Array | Int32Array;\n\nconst u8a = (a: any): a is Uint8Array => a instanceof Uint8Array;\n// Cast array to different type\nexport const u8 = (arr: TypedArray) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexport const u32 = (arr: TypedArray) =>\n  new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n\n// Cast array to view\nexport const createView = (arr: TypedArray) =>\n  new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n\n// The rotate right (circular right shift) operation for uint32\nexport const rotr = (word: number, shift: number) => (word << (32 - shift)) | (word >>> shift);\n\n// big-endian hardware is rare. Just in case someone still decides to run hashes:\n// early-throw an error because we don't support BE yet.\nexport const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\nif (!isLE) throw new Error('Non little-endian hardware is not supported');\n\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes: Uint8Array): string {\n  if (!u8a(bytes)) throw new Error('Uint8Array expected');\n  // pre-caching improves the speed 6x\n  let hex = '';\n  for (let i = 0; i < bytes.length; i++) {\n    hex += hexes[bytes[i]];\n  }\n  return hex;\n}\n\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex: string): Uint8Array {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  const len = hex.length;\n  if (len % 2) throw new Error('padded hex string expected, got unpadded hex of length ' + len);\n  const array = new Uint8Array(len / 2);\n  for (let i = 0; i < array.length; i++) {\n    const j = i * 2;\n    const hexByte = hex.slice(j, j + 2);\n    const byte = Number.parseInt(hexByte, 16);\n    if (Number.isNaN(byte) || byte < 0) throw new Error('Invalid byte sequence');\n    array[i] = byte;\n  }\n  return array;\n}\n\n// There is no setImmediate in browser and setTimeout is slow.\n// call of async fn will return Promise, which will be fullfiled only on\n// next scheduler queue processing step and this is exactly what we need.\nexport const nextTick = async () => {};\n\n// Returns control to thread each 'tick' ms to avoid blocking\nexport async function asyncLoop(iters: number, tick: number, cb: (i: number) => void) {\n  let ts = Date.now();\n  for (let i = 0; i < iters; i++) {\n    cb(i);\n    // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n    const diff = Date.now() - ts;\n    if (diff >= 0 && diff < tick) continue;\n    await nextTick();\n    ts += diff;\n  }\n}\n\n// Global symbols in both browsers and Node.js since v11\n// See https://github.com/microsoft/TypeScript/issues/31535\ndeclare const TextEncoder: any;\n\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str: string): Uint8Array {\n  if (typeof str !== 'string') throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n  return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n\nexport type Input = Uint8Array | string;\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nexport function toBytes(data: Input): Uint8Array {\n  if (typeof data === 'string') data = utf8ToBytes(data);\n  if (!u8a(data)) throw new Error(`expected Uint8Array, got ${typeof data}`);\n  return data;\n}\n\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\n  const r = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));\n  let pad = 0; // walk through each item, ensure they have proper type\n  arrays.forEach((a) => {\n    if (!u8a(a)) throw new Error('Uint8Array expected');\n    r.set(a, pad);\n    pad += a.length;\n  });\n  return r;\n}\n\n// For runtime check if class implements interface\nexport abstract class Hash<T extends Hash<T>> {\n  abstract blockLen: number; // Bytes per block\n  abstract outputLen: number; // Bytes in output\n  abstract update(buf: Input): this;\n  // Writes digest into buf\n  abstract digestInto(buf: Uint8Array): void;\n  abstract digest(): Uint8Array;\n  /**\n   * Resets internal state. Makes Hash instance unusable.\n   * Reset is impossible for keyed hashes if key is consumed into state. If digest is not consumed\n   * by user, they will need to manually call `destroy()` when zeroing is necessary.\n   */\n  abstract destroy(): void;\n  /**\n   * Clones hash instance. Unsafe: doesn't check whether `to` is valid. Can be used as `clone()`\n   * when no options are passed.\n   * Reasons to use `_cloneInto` instead of clone: 1) performance 2) reuse instance => all internal\n   * buffers are overwritten => causes buffer overwrite which is used for digest in some cases.\n   * There are no guarantees for clean-up because it's impossible in JS.\n   */\n  abstract _cloneInto(to?: T): T;\n  // Safe version that clones internal state\n  clone(): T {\n    return this._cloneInto();\n  }\n}\n\n/**\n * XOF: streaming API to read digest in chunks.\n * Same as 'squeeze' in keccak/k12 and 'seek' in blake3, but more generic name.\n * When hash used in XOF mode it is up to user to call '.destroy' afterwards, since we cannot\n * destroy state, next call can require more bytes.\n */\nexport type HashXOF<T extends Hash<T>> = Hash<T> & {\n  xof(bytes: number): Uint8Array; // Read 'bytes' bytes from digest stream\n  xofInto(buf: Uint8Array): Uint8Array; // read buf.length bytes from digest stream into buf\n};\n\n// Check if object doens't have custom constructor (like Uint8Array/Array)\nconst isPlainObject = (obj: any) =>\n  Object.prototype.toString.call(obj) === '[object Object]' && obj.constructor === Object;\n\ntype EmptyObj = {};\nexport function checkOpts<T1 extends EmptyObj, T2 extends EmptyObj>(\n  defaults: T1,\n  opts?: T2\n): T1 & T2 {\n  if (opts !== undefined && (typeof opts !== 'object' || !isPlainObject(opts)))\n    throw new Error('Options should be object or undefined');\n  const merged = Object.assign(defaults, opts);\n  return merged as T1 & T2;\n}\n\nexport type CHash = ReturnType<typeof wrapConstructor>;\n\nexport function wrapConstructor<T extends Hash<T>>(hashCons: () => Hash<T>) {\n  const hashC = (msg: Input): Uint8Array => hashCons().update(toBytes(msg)).digest();\n  const tmp = hashCons();\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = () => hashCons();\n  return hashC;\n}\n\nexport function wrapConstructorWithOpts<H extends Hash<H>, T extends Object>(\n  hashCons: (opts?: T) => Hash<H>\n) {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts: T) => hashCons(opts);\n  return hashC;\n}\n\nexport function wrapXOFConstructorWithOpts<H extends HashXOF<H>, T extends Object>(\n  hashCons: (opts?: T) => HashXOF<H>\n) {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts: T) => hashCons(opts);\n  return hashC;\n}\n\n/**\n * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.\n */\nexport function randomBytes(bytesLength = 32): Uint8Array {\n  if (crypto && typeof crypto.getRandomValues === 'function') {\n    return crypto.getRandomValues(new Uint8Array(bytesLength));\n  }\n  throw new Error('crypto.getRandomValues must be defined');\n}\n","import assert from './_assert.js';\nimport { Hash, createView, Input, toBytes } from './utils.js';\n\n// Polyfill for Safari 14\nfunction setBigUint64(view: DataView, byteOffset: number, value: bigint, isLE: boolean): void {\n  if (typeof view.setBigUint64 === 'function') return view.setBigUint64(byteOffset, value, isLE);\n  const _32n = BigInt(32);\n  const _u32_max = BigInt(0xffffffff);\n  const wh = Number((value >> _32n) & _u32_max);\n  const wl = Number(value & _u32_max);\n  const h = isLE ? 4 : 0;\n  const l = isLE ? 0 : 4;\n  view.setUint32(byteOffset + h, wh, isLE);\n  view.setUint32(byteOffset + l, wl, isLE);\n}\n\n// Base SHA2 class (RFC 6234)\nexport abstract class SHA2<T extends SHA2<T>> extends Hash<T> {\n  protected abstract process(buf: DataView, offset: number): void;\n  protected abstract get(): number[];\n  protected abstract set(...args: number[]): void;\n  abstract destroy(): void;\n  protected abstract roundClean(): void;\n  // For partial updates less than block size\n  protected buffer: Uint8Array;\n  protected view: DataView;\n  protected finished = false;\n  protected length = 0;\n  protected pos = 0;\n  protected destroyed = false;\n\n  constructor(\n    readonly blockLen: number,\n    public outputLen: number,\n    readonly padOffset: number,\n    readonly isLE: boolean\n  ) {\n    super();\n    this.buffer = new Uint8Array(blockLen);\n    this.view = createView(this.buffer);\n  }\n  update(data: Input): this {\n    assert.exists(this);\n    const { view, buffer, blockLen } = this;\n    data = toBytes(data);\n    const len = data.length;\n    for (let pos = 0; pos < len; ) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      // Fast path: we have at least one block in input, cast it to view and process\n      if (take === blockLen) {\n        const dataView = createView(data);\n        for (; blockLen <= len - pos; pos += blockLen) this.process(dataView, pos);\n        continue;\n      }\n      buffer.set(data.subarray(pos, pos + take), this.pos);\n      this.pos += take;\n      pos += take;\n      if (this.pos === blockLen) {\n        this.process(view, 0);\n        this.pos = 0;\n      }\n    }\n    this.length += data.length;\n    this.roundClean();\n    return this;\n  }\n  digestInto(out: Uint8Array) {\n    assert.exists(this);\n    assert.output(out, this);\n    this.finished = true;\n    // Padding\n    // We can avoid allocation of buffer for padding completely if it\n    // was previously not allocated here. But it won't change performance.\n    const { buffer, view, blockLen, isLE } = this;\n    let { pos } = this;\n    // append the bit '1' to the message\n    buffer[pos++] = 0b10000000;\n    this.buffer.subarray(pos).fill(0);\n    // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n    if (this.padOffset > blockLen - pos) {\n      this.process(view, 0);\n      pos = 0;\n    }\n    // Pad until full block byte with zeros\n    for (let i = pos; i < blockLen; i++) buffer[i] = 0;\n    // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n    // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n    // So we just write lowest 64 bits of that value.\n    setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n    this.process(view, 0);\n    const oview = createView(out);\n    const len = this.outputLen;\n    // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n    if (len % 4) throw new Error('_sha2: outputLen should be aligned to 32bit');\n    const outLen = len / 4;\n    const state = this.get();\n    if (outLen > state.length) throw new Error('_sha2: outputLen bigger than state');\n    for (let i = 0; i < outLen; i++) oview.setUint32(4 * i, state[i], isLE);\n  }\n  digest() {\n    const { buffer, outputLen } = this;\n    this.digestInto(buffer);\n    const res = buffer.slice(0, outputLen);\n    this.destroy();\n    return res;\n  }\n  _cloneInto(to?: T): T {\n    to ||= new (this.constructor as any)() as T;\n    to.set(...this.get());\n    const { blockLen, buffer, length, finished, destroyed, pos } = this;\n    to.length = length;\n    to.pos = pos;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    if (length % blockLen) to.buffer.set(buffer);\n    return to;\n  }\n}\n","import { SHA2 } from './_sha2.js';\nimport { rotr, wrapConstructor } from './utils.js';\n\n// Choice: a ? b : c\nconst Chi = (a: number, b: number, c: number) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nconst Maj = (a: number, b: number, c: number) => (a & b) ^ (a & c) ^ (b & c);\n\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = new Uint32Array([\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n\n// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n// prettier-ignore\nconst IV = new Uint32Array([\n  0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = new Uint32Array(64);\nclass SHA256 extends SHA2<SHA256> {\n  // We cannot use array here since array allows indexing by variable\n  // which means optimizer/compiler cannot use registers.\n  A = IV[0] | 0;\n  B = IV[1] | 0;\n  C = IV[2] | 0;\n  D = IV[3] | 0;\n  E = IV[4] | 0;\n  F = IV[5] | 0;\n  G = IV[6] | 0;\n  H = IV[7] | 0;\n\n  constructor() {\n    super(64, 32, 8, false);\n  }\n  protected get(): [number, number, number, number, number, number, number, number] {\n    const { A, B, C, D, E, F, G, H } = this;\n    return [A, B, C, D, E, F, G, H];\n  }\n  // prettier-ignore\n  protected set(\n    A: number, B: number, C: number, D: number, E: number, F: number, G: number, H: number\n  ) {\n    this.A = A | 0;\n    this.B = B | 0;\n    this.C = C | 0;\n    this.D = D | 0;\n    this.E = E | 0;\n    this.F = F | 0;\n    this.G = G | 0;\n    this.H = H | 0;\n  }\n  protected process(view: DataView, offset: number): void {\n    // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n    for (let i = 0; i < 16; i++, offset += 4) SHA256_W[i] = view.getUint32(offset, false);\n    for (let i = 16; i < 64; i++) {\n      const W15 = SHA256_W[i - 15];\n      const W2 = SHA256_W[i - 2];\n      const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n      const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n      SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n    }\n    // Compression function main loop, 64 rounds\n    let { A, B, C, D, E, F, G, H } = this;\n    for (let i = 0; i < 64; i++) {\n      const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n      const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n      const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n      const T2 = (sigma0 + Maj(A, B, C)) | 0;\n      H = G;\n      G = F;\n      F = E;\n      E = (D + T1) | 0;\n      D = C;\n      C = B;\n      B = A;\n      A = (T1 + T2) | 0;\n    }\n    // Add the compressed chunk to the current hash value\n    A = (A + this.A) | 0;\n    B = (B + this.B) | 0;\n    C = (C + this.C) | 0;\n    D = (D + this.D) | 0;\n    E = (E + this.E) | 0;\n    F = (F + this.F) | 0;\n    G = (G + this.G) | 0;\n    H = (H + this.H) | 0;\n    this.set(A, B, C, D, E, F, G, H);\n  }\n  protected roundClean() {\n    SHA256_W.fill(0);\n  }\n  destroy() {\n    this.set(0, 0, 0, 0, 0, 0, 0, 0);\n    this.buffer.fill(0);\n  }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n  A = 0xc1059ed8 | 0;\n  B = 0x367cd507 | 0;\n  C = 0x3070dd17 | 0;\n  D = 0xf70e5939 | 0;\n  E = 0xffc00b31 | 0;\n  F = 0x68581511 | 0;\n  G = 0x64f98fa7 | 0;\n  H = 0xbefa4fa4 | 0;\n  constructor() {\n    super();\n    this.outputLen = 28;\n  }\n}\n\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexport const sha256 = wrapConstructor(() => new SHA256());\nexport const sha224 = wrapConstructor(() => new SHA224());\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Utilities for modular arithmetics and finite fields\nimport {\n  bitMask,\n  numberToBytesBE,\n  numberToBytesLE,\n  bytesToNumberBE,\n  bytesToNumberLE,\n  ensureBytes,\n  validateObject,\n} from './utils.js';\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);\n// prettier-ignore\nconst _4n = BigInt(4), _5n = BigInt(5), _8n = BigInt(8);\n// prettier-ignore\nconst _9n = BigInt(9), _16n = BigInt(16);\n\n// Calculates a modulo b\nexport function mod(a: bigint, b: bigint): bigint {\n  const result = a % b;\n  return result >= _0n ? result : b + result;\n}\n/**\n * Efficiently raise num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * @example\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\n */\n// TODO: use field version && remove\nexport function pow(num: bigint, power: bigint, modulo: bigint): bigint {\n  if (modulo <= _0n || power < _0n) throw new Error('Expected power/modulo > 0');\n  if (modulo === _1n) return _0n;\n  let res = _1n;\n  while (power > _0n) {\n    if (power & _1n) res = (res * num) % modulo;\n    num = (num * num) % modulo;\n    power >>= _1n;\n  }\n  return res;\n}\n\n// Does x ^ (2 ^ power) mod p. pow2(30, 4) == 30 ^ (2 ^ 4)\nexport function pow2(x: bigint, power: bigint, modulo: bigint): bigint {\n  let res = x;\n  while (power-- > _0n) {\n    res *= res;\n    res %= modulo;\n  }\n  return res;\n}\n\n// Inverses number over modulo\nexport function invert(number: bigint, modulo: bigint): bigint {\n  if (number === _0n || modulo <= _0n) {\n    throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n  }\n  // Euclidean GCD https://brilliant.org/wiki/extended-euclidean-algorithm/\n  // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n  let a = mod(number, modulo);\n  let b = modulo;\n  // prettier-ignore\n  let x = _0n, y = _1n, u = _1n, v = _0n;\n  while (a !== _0n) {\n    // JIT applies optimization if those two lines follow each other\n    const q = b / a;\n    const r = b % a;\n    const m = x - u * q;\n    const n = y - v * q;\n    // prettier-ignore\n    b = a, a = r, x = u, y = v, u = m, v = n;\n  }\n  const gcd = b;\n  if (gcd !== _1n) throw new Error('invert: does not exist');\n  return mod(x, modulo);\n}\n\n// Tonelli-Shanks algorithm\n// Paper 1: https://eprint.iacr.org/2012/685.pdf (page 12)\n// Paper 2: Square Roots from 1; 24, 51, 10 to Dan Shanks\nexport function tonelliShanks(P: bigint) {\n  // Legendre constant: used to calculate Legendre symbol (a | p),\n  // which denotes the value of a^((p-1)/2) (mod p).\n  // (a | p) ≡ 1    if a is a square (mod p)\n  // (a | p) ≡ -1   if a is not a square (mod p)\n  // (a | p) ≡ 0    if a ≡ 0 (mod p)\n  const legendreC = (P - _1n) / _2n;\n\n  let Q: bigint, S: number, Z: bigint;\n  // Step 1: By factoring out powers of 2 from p - 1,\n  // find q and s such that p - 1 = q*(2^s) with q odd\n  for (Q = P - _1n, S = 0; Q % _2n === _0n; Q /= _2n, S++);\n\n  // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq\n  for (Z = _2n; Z < P && pow(Z, legendreC, P) !== P - _1n; Z++);\n\n  // Fast-path\n  if (S === 1) {\n    const p1div4 = (P + _1n) / _4n;\n    return function tonelliFast<T>(Fp: IField<T>, n: T) {\n      const root = Fp.pow(n, p1div4);\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // Slow-path\n  const Q1div2 = (Q + _1n) / _2n;\n  return function tonelliSlow<T>(Fp: IField<T>, n: T): T {\n    // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1\n    if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE)) throw new Error('Cannot find square root');\n    let r = S;\n    // TODO: will fail at Fp2/etc\n    let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b\n    let x = Fp.pow(n, Q1div2); // first guess at the square root\n    let b = Fp.pow(n, Q); // first guess at the fudge factor\n\n    while (!Fp.eql(b, Fp.ONE)) {\n      if (Fp.eql(b, Fp.ZERO)) return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)\n      // Find m such b^(2^m)==1\n      let m = 1;\n      for (let t2 = Fp.sqr(b); m < r; m++) {\n        if (Fp.eql(t2, Fp.ONE)) break;\n        t2 = Fp.sqr(t2); // t2 *= t2\n      }\n      // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow\n      const ge = Fp.pow(g, _1n << BigInt(r - m - 1)); // ge = 2^(r-m-1)\n      g = Fp.sqr(ge); // g = ge * ge\n      x = Fp.mul(x, ge); // x *= ge\n      b = Fp.mul(b, g); // b *= g\n      r = m;\n    }\n    return x;\n  };\n}\n\nexport function FpSqrt(P: bigint) {\n  // NOTE: different algorithms can give different roots, it is up to user to decide which one they want.\n  // For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n\n  // P ≡ 3 (mod 4)\n  // √n = n^((P+1)/4)\n  if (P % _4n === _3n) {\n    // Not all roots possible!\n    // const ORDER =\n    //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;\n    // const NUM = 72057594037927816n;\n    const p1div4 = (P + _1n) / _4n;\n    return function sqrt3mod4<T>(Fp: IField<T>, n: T) {\n      const root = Fp.pow(n, p1div4);\n      // Throw if root**2 != n\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)\n  if (P % _8n === _5n) {\n    const c1 = (P - _5n) / _8n;\n    return function sqrt5mod8<T>(Fp: IField<T>, n: T) {\n      const n2 = Fp.mul(n, _2n);\n      const v = Fp.pow(n2, c1);\n      const nv = Fp.mul(n, v);\n      const i = Fp.mul(Fp.mul(nv, _2n), v);\n      const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // P ≡ 9 (mod 16)\n  if (P % _16n === _9n) {\n    // NOTE: tonelli is too slow for bls-Fp2 calculations even on start\n    // Means we cannot use sqrt for constants at all!\n    //\n    // const c1 = Fp.sqrt(Fp.negate(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n    // const c2 = Fp.sqrt(c1);                //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n    // const c3 = Fp.sqrt(Fp.negate(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n    // const c4 = (P + _7n) / _16n;           //  4. c4 = (q + 7) / 16        # Integer arithmetic\n    // sqrt = (x) => {\n    //   let tv1 = Fp.pow(x, c4);             //  1. tv1 = x^c4\n    //   let tv2 = Fp.mul(c1, tv1);           //  2. tv2 = c1 * tv1\n    //   const tv3 = Fp.mul(c2, tv1);         //  3. tv3 = c2 * tv1\n    //   let tv4 = Fp.mul(c3, tv1);           //  4. tv4 = c3 * tv1\n    //   const e1 = Fp.equals(Fp.square(tv2), x); //  5.  e1 = (tv2^2) == x\n    //   const e2 = Fp.equals(Fp.square(tv3), x); //  6.  e2 = (tv3^2) == x\n    //   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n    //   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n    //   const e3 = Fp.equals(Fp.square(tv2), x); //  9.  e3 = (tv2^2) == x\n    //   return Fp.cmov(tv1, tv2, e3); //  10.  z = CMOV(tv1, tv2, e3)  # Select the sqrt from tv1 and tv2\n    // }\n  }\n\n  // Other cases: Tonelli-Shanks algorithm\n  return tonelliShanks(P);\n}\n\n// Little-endian check for first LE bit (last BE bit);\nexport const isNegativeLE = (num: bigint, modulo: bigint) => (mod(num, modulo) & _1n) === _1n;\n\n// Field is not always over prime, Fp2 for example has ORDER(q)=p^m\nexport interface IField<T> {\n  ORDER: bigint;\n  BYTES: number;\n  BITS: number;\n  MASK: bigint;\n  ZERO: T;\n  ONE: T;\n  // 1-arg\n  create: (num: T) => T;\n  isValid: (num: T) => boolean;\n  is0: (num: T) => boolean;\n  neg(num: T): T;\n  inv(num: T): T;\n  sqrt(num: T): T;\n  sqr(num: T): T;\n  // 2-args\n  eql(lhs: T, rhs: T): boolean;\n  add(lhs: T, rhs: T): T;\n  sub(lhs: T, rhs: T): T;\n  mul(lhs: T, rhs: T | bigint): T;\n  pow(lhs: T, power: bigint): T;\n  div(lhs: T, rhs: T | bigint): T;\n  // N for NonNormalized (for now)\n  addN(lhs: T, rhs: T): T;\n  subN(lhs: T, rhs: T): T;\n  mulN(lhs: T, rhs: T | bigint): T;\n  sqrN(num: T): T;\n\n  // Optional\n  // Should be same as sgn0 function in https://datatracker.ietf.org/doc/draft-irtf-cfrg-hash-to-curve/\n  // NOTE: sgn0 is 'negative in LE', which is same as odd. And negative in LE is kinda strange definition anyway.\n  isOdd?(num: T): boolean; // Odd instead of even since we have it for Fp2\n  // legendre?(num: T): T;\n  pow(lhs: T, power: bigint): T;\n  invertBatch: (lst: T[]) => T[];\n  toBytes(num: T): Uint8Array;\n  fromBytes(bytes: Uint8Array): T;\n  // If c is False, CMOV returns a, otherwise it returns b.\n  cmov(a: T, b: T, c: boolean): T;\n}\n// prettier-ignore\nconst FIELD_FIELDS = [\n  'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',\n  'eql', 'add', 'sub', 'mul', 'pow', 'div',\n  'addN', 'subN', 'mulN', 'sqrN'\n] as const;\nexport function validateField<T>(field: IField<T>) {\n  const initial = {\n    ORDER: 'bigint',\n    MASK: 'bigint',\n    BYTES: 'isSafeInteger',\n    BITS: 'isSafeInteger',\n  } as Record<string, string>;\n  const opts = FIELD_FIELDS.reduce((map, val: string) => {\n    map[val] = 'function';\n    return map;\n  }, initial);\n  return validateObject(field, opts);\n}\n\n// Generic field functions\nexport function FpPow<T>(f: IField<T>, num: T, power: bigint): T {\n  // Should have same speed as pow for bigints\n  // TODO: benchmark!\n  if (power < _0n) throw new Error('Expected power > 0');\n  if (power === _0n) return f.ONE;\n  if (power === _1n) return num;\n  let p = f.ONE;\n  let d = num;\n  while (power > _0n) {\n    if (power & _1n) p = f.mul(p, d);\n    d = f.sqr(d);\n    power >>= _1n;\n  }\n  return p;\n}\n\n// 0 is non-invertible: non-batched version will throw on 0\nexport function FpInvertBatch<T>(f: IField<T>, nums: T[]): T[] {\n  const tmp = new Array(nums.length);\n  // Walk from first to last, multiply them by each other MOD p\n  const lastMultiplied = nums.reduce((acc, num, i) => {\n    if (f.is0(num)) return acc;\n    tmp[i] = acc;\n    return f.mul(acc, num);\n  }, f.ONE);\n  // Invert last element\n  const inverted = f.inv(lastMultiplied);\n  // Walk from last to first, multiply them by inverted each other MOD p\n  nums.reduceRight((acc, num, i) => {\n    if (f.is0(num)) return acc;\n    tmp[i] = f.mul(acc, tmp[i]);\n    return f.mul(acc, num);\n  }, inverted);\n  return tmp;\n}\n\nexport function FpDiv<T>(f: IField<T>, lhs: T, rhs: T | bigint): T {\n  return f.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, f.ORDER) : f.inv(rhs));\n}\n\n// This function returns True whenever the value x is a square in the field F.\nexport function FpIsSquare<T>(f: IField<T>) {\n  const legendreConst = (f.ORDER - _1n) / _2n; // Integer arithmetic\n  return (x: T): boolean => {\n    const p = f.pow(x, legendreConst);\n    return f.eql(p, f.ZERO) || f.eql(p, f.ONE);\n  };\n}\n\n// CURVE.n lengths\nexport function nLength(n: bigint, nBitLength?: number) {\n  // Bit size, byte size of CURVE.n\n  const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n  const nByteLength = Math.ceil(_nBitLength / 8);\n  return { nBitLength: _nBitLength, nByteLength };\n}\n\ntype FpField = IField<bigint> & Required<Pick<IField<bigint>, 'isOdd'>>;\n/**\n * Initializes a galois field over prime. Non-primes are not supported for now.\n * Do not init in loop: slow. Very fragile: always run a benchmark on change.\n * Major performance gains:\n * a) non-normalized operations like mulN instead of mul\n * b) `Object.freeze`\n * c) Same object shape: never add or remove keys\n * @param ORDER prime positive bigint\n * @param bitLen how many bits the field consumes\n * @param isLE (def: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */\nexport function Field(\n  ORDER: bigint,\n  bitLen?: number,\n  isLE = false,\n  redef: Partial<IField<bigint>> = {}\n): Readonly<FpField> {\n  if (ORDER <= _0n) throw new Error(`Expected Fp ORDER > 0, got ${ORDER}`);\n  const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);\n  if (BYTES > 2048) throw new Error('Field lengths over 2048 bytes are not supported');\n  const sqrtP = FpSqrt(ORDER);\n  const f: Readonly<FpField> = Object.freeze({\n    ORDER,\n    BITS,\n    BYTES,\n    MASK: bitMask(BITS),\n    ZERO: _0n,\n    ONE: _1n,\n    create: (num) => mod(num, ORDER),\n    isValid: (num) => {\n      if (typeof num !== 'bigint')\n        throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);\n      return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n    },\n    is0: (num) => num === _0n,\n    isOdd: (num) => (num & _1n) === _1n,\n    neg: (num) => mod(-num, ORDER),\n    eql: (lhs, rhs) => lhs === rhs,\n\n    sqr: (num) => mod(num * num, ORDER),\n    add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n    sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n    mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n    pow: (num, power) => FpPow(f, num, power),\n    div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n\n    // Same as above, but doesn't normalize\n    sqrN: (num) => num * num,\n    addN: (lhs, rhs) => lhs + rhs,\n    subN: (lhs, rhs) => lhs - rhs,\n    mulN: (lhs, rhs) => lhs * rhs,\n\n    inv: (num) => invert(num, ORDER),\n    sqrt: redef.sqrt || ((n) => sqrtP(f, n)),\n    invertBatch: (lst) => FpInvertBatch(f, lst),\n    // TODO: do we really need constant cmov?\n    // We don't have const-time bigints anyway, so probably will be not very useful\n    cmov: (a, b, c) => (c ? b : a),\n    toBytes: (num) => (isLE ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES)),\n    fromBytes: (bytes) => {\n      if (bytes.length !== BYTES)\n        throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes.length}`);\n      return isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\n    },\n  } as FpField);\n  return Object.freeze(f);\n}\n\nexport function FpSqrtOdd<T>(Fp: IField<T>, elm: T) {\n  if (!Fp.isOdd) throw new Error(`Field doesn't have isOdd`);\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? root : Fp.neg(root);\n}\n\nexport function FpSqrtEven<T>(Fp: IField<T>, elm: T) {\n  if (!Fp.isOdd) throw new Error(`Field doesn't have isOdd`);\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\n\n/**\n * FIPS 186 B.4.1-compliant \"constant-time\" private key generation utility.\n * Can take (n+8) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being negligible.\n * Needs at least 40 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * @param hash hash output from SHA3 or a similar function\n * @param groupOrder size of subgroup - (e.g. curveFn.CURVE.n)\n * @param isLE interpret hash bytes as LE num\n * @returns valid private scalar\n */\nexport function hashToPrivateScalar(\n  hash: string | Uint8Array,\n  groupOrder: bigint,\n  isLE = false\n): bigint {\n  hash = ensureBytes('privateHash', hash);\n  const hashLen = hash.length;\n  const minLen = nLength(groupOrder).nByteLength + 8;\n  if (minLen < 24 || hashLen < minLen || hashLen > 1024)\n    throw new Error(`hashToPrivateScalar: expected ${minLen}-1024 bytes of input, got ${hashLen}`);\n  const num = isLE ? bytesToNumberLE(hash) : bytesToNumberBE(hash);\n  return mod(num, groupOrder - _1n) + _1n;\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Abelian group utilities\nimport { IField, validateField, nLength } from './modular.js';\nimport { validateObject } from './utils.js';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\n\nexport type AffinePoint<T> = {\n  x: T;\n  y: T;\n} & { z?: never; t?: never };\n\nexport interface Group<T extends Group<T>> {\n  double(): T;\n  negate(): T;\n  add(other: T): T;\n  subtract(other: T): T;\n  equals(other: T): boolean;\n  multiply(scalar: bigint): T;\n}\n\nexport type GroupConstructor<T> = {\n  BASE: T;\n  ZERO: T;\n};\nexport type Mapper<T> = (i: T[]) => T[];\n\n// Elliptic curve multiplication of Point by scalar. Fragile.\n// Scalars should always be less than curve order: this should be checked inside of a curve itself.\n// Creates precomputation tables for fast multiplication:\n// - private scalar is split by fixed size windows of W bits\n// - every window point is collected from window's table & added to accumulator\n// - since windows are different, same point inside tables won't be accessed more than once per calc\n// - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)\n// - +1 window is neccessary for wNAF\n// - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\n// TODO: Research returning 2d JS array of windows, instead of a single window. This would allow\n// windows to be in different memory locations\nexport function wNAF<T extends Group<T>>(c: GroupConstructor<T>, bits: number) {\n  const constTimeNegate = (condition: boolean, item: T): T => {\n    const neg = item.negate();\n    return condition ? neg : item;\n  };\n  const opts = (W: number) => {\n    const windows = Math.ceil(bits / W) + 1; // +1, because\n    const windowSize = 2 ** (W - 1); // -1 because we skip zero\n    return { windows, windowSize };\n  };\n  return {\n    constTimeNegate,\n    // non-const time multiplication ladder\n    unsafeLadder(elm: T, n: bigint) {\n      let p = c.ZERO;\n      let d: T = elm;\n      while (n > _0n) {\n        if (n & _1n) p = p.add(d);\n        d = d.double();\n        n >>= _1n;\n      }\n      return p;\n    },\n\n    /**\n     * Creates a wNAF precomputation window. Used for caching.\n     * Default window size is set by `utils.precompute()` and is equal to 8.\n     * Number of precomputed points depends on the curve size:\n     * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\n     * - 𝑊 is the window size\n     * - 𝑛 is the bitlength of the curve order.\n     * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n     * @returns precomputed point tables flattened to a single array\n     */\n    precomputeWindow(elm: T, W: number): Group<T>[] {\n      const { windows, windowSize } = opts(W);\n      const points: T[] = [];\n      let p: T = elm;\n      let base = p;\n      for (let window = 0; window < windows; window++) {\n        base = p;\n        points.push(base);\n        // =1, because we skip zero\n        for (let i = 1; i < windowSize; i++) {\n          base = base.add(p);\n          points.push(base);\n        }\n        p = base.double();\n      }\n      return points;\n    },\n\n    /**\n     * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n     * @param W window size\n     * @param precomputes precomputed tables\n     * @param n scalar (we don't check here, but should be less than curve order)\n     * @returns real and fake (for const-time) points\n     */\n    wNAF(W: number, precomputes: T[], n: bigint): { p: T; f: T } {\n      // TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise\n      // But need to carefully remove other checks before wNAF. ORDER == bits here\n      const { windows, windowSize } = opts(W);\n\n      let p = c.ZERO;\n      let f = c.BASE;\n\n      const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.\n      const maxNumber = 2 ** W;\n      const shiftBy = BigInt(W);\n\n      for (let window = 0; window < windows; window++) {\n        const offset = window * windowSize;\n        // Extract W bits.\n        let wbits = Number(n & mask);\n\n        // Shift number by W bits.\n        n >>= shiftBy;\n\n        // If the bits are bigger than max size, we'll split those.\n        // +224 => 256 - 32\n        if (wbits > windowSize) {\n          wbits -= maxNumber;\n          n += _1n;\n        }\n\n        // This code was first written with assumption that 'f' and 'p' will never be infinity point:\n        // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\n        // there is negate now: it is possible that negated element from low value\n        // would be the same as high element, which will create carry into next window.\n        // It's not obvious how this can fail, but still worth investigating later.\n\n        // Check if we're onto Zero point.\n        // Add random point inside current window to f.\n        const offset1 = offset;\n        const offset2 = offset + Math.abs(wbits) - 1; // -1 because we skip zero\n        const cond1 = window % 2 !== 0;\n        const cond2 = wbits < 0;\n        if (wbits === 0) {\n          // The most important part for const-time getPublicKey\n          f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n        } else {\n          p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n        }\n      }\n      // JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()\n      // Even if the variable is still unused, there are some checks which will\n      // throw an exception, so compiler needs to prove they won't happen, which is hard.\n      // At this point there is a way to F be infinity-point even if p is not,\n      // which makes it less const-time: around 1 bigint multiply.\n      return { p, f };\n    },\n\n    wNAFCached(P: T, precomputesMap: Map<T, T[]>, n: bigint, transform: Mapper<T>): { p: T; f: T } {\n      // @ts-ignore\n      const W: number = P._WINDOW_SIZE || 1;\n      // Calculate precomputes on a first run, reuse them after\n      let comp = precomputesMap.get(P);\n      if (!comp) {\n        comp = this.precomputeWindow(P, W) as T[];\n        if (W !== 1) {\n          precomputesMap.set(P, transform(comp));\n        }\n      }\n      return this.wNAF(W, comp, n);\n    },\n  };\n}\n\n// Generic BasicCurve interface: works even for polynomial fields (BLS): P, n, h would be ok.\n// Though generator can be different (Fp2 / Fp6 for BLS).\nexport type BasicCurve<T> = {\n  Fp: IField<T>; // Field over which we'll do calculations (Fp)\n  n: bigint; // Curve order, total count of valid points in the field\n  nBitLength?: number; // bit length of curve order\n  nByteLength?: number; // byte length of curve order\n  h: bigint; // cofactor. we can assign default=1, but users will just ignore it w/o validation\n  hEff?: bigint; // Number to multiply to clear cofactor\n  Gx: T; // base point X coordinate\n  Gy: T; // base point Y coordinate\n  allowInfinityPoint?: boolean; // bls12-381 requires it. ZERO point is valid, but invalid pubkey\n};\n\nexport function validateBasic<FP, T>(curve: BasicCurve<FP> & T) {\n  validateField(curve.Fp);\n  validateObject(\n    curve,\n    {\n      n: 'bigint',\n      h: 'bigint',\n      Gx: 'field',\n      Gy: 'field',\n    },\n    {\n      nBitLength: 'isSafeInteger',\n      nByteLength: 'isSafeInteger',\n    }\n  );\n  // Set defaults\n  return Object.freeze({\n    ...nLength(curve.n, curve.nBitLength),\n    ...curve,\n    ...{ p: curve.Fp.ORDER },\n  } as const);\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Short Weierstrass curve. The formula is: y² = x³ + ax + b\nimport * as mod from './modular.js';\nimport * as ut from './utils.js';\nimport { CHash, Hex, PrivKey, ensureBytes } from './utils.js';\nimport { Group, GroupConstructor, wNAF, BasicCurve, validateBasic, AffinePoint } from './curve.js';\n\nexport type { AffinePoint };\ntype HmacFnSync = (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array;\ntype EndomorphismOpts = {\n  beta: bigint;\n  splitScalar: (k: bigint) => { k1neg: boolean; k1: bigint; k2neg: boolean; k2: bigint };\n};\nexport type BasicWCurve<T> = BasicCurve<T> & {\n  // Params: a, b\n  a: T;\n  b: T;\n\n  // Optional params\n  allowedPrivateKeyLengths?: readonly number[]; // for P521\n  wrapPrivateKey?: boolean; // bls12-381 requires mod(n) instead of rejecting keys >= n\n  endo?: EndomorphismOpts; // Endomorphism options for Koblitz curves\n  // When a cofactor != 1, there can be an effective methods to:\n  // 1. Determine whether a point is torsion-free\n  isTorsionFree?: (c: ProjConstructor<T>, point: ProjPointType<T>) => boolean;\n  // 2. Clear torsion component\n  clearCofactor?: (c: ProjConstructor<T>, point: ProjPointType<T>) => ProjPointType<T>;\n};\n\ntype Entropy = Hex | true;\nexport type SignOpts = { lowS?: boolean; extraEntropy?: Entropy; prehash?: boolean };\nexport type VerOpts = { lowS?: boolean; prehash?: boolean };\n\n/**\n * ### Design rationale for types\n *\n * * Interaction between classes from different curves should fail:\n *   `k256.Point.BASE.add(p256.Point.BASE)`\n * * For this purpose we want to use `instanceof` operator, which is fast and works during runtime\n * * Different calls of `curve()` would return different classes -\n *   `curve(params) !== curve(params)`: if somebody decided to monkey-patch their curve,\n *   it won't affect others\n *\n * TypeScript can't infer types for classes created inside a function. Classes is one instance of nominative types in TypeScript and interfaces only check for shape, so it's hard to create unique type for every function call.\n *\n * We can use generic types via some param, like curve opts, but that would:\n *     1. Enable interaction between `curve(params)` and `curve(params)` (curves of same params)\n *     which is hard to debug.\n *     2. Params can be generic and we can't enforce them to be constant value:\n *     if somebody creates curve from non-constant params,\n *     it would be allowed to interact with other curves with non-constant params\n *\n * TODO: https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-7.html#unique-symbol\n */\n\n// Instance for 3d XYZ points\nexport interface ProjPointType<T> extends Group<ProjPointType<T>> {\n  readonly px: T;\n  readonly py: T;\n  readonly pz: T;\n  get x(): T;\n  get y(): T;\n  multiply(scalar: bigint): ProjPointType<T>;\n  toAffine(iz?: T): AffinePoint<T>;\n  isTorsionFree(): boolean;\n  clearCofactor(): ProjPointType<T>;\n  assertValidity(): void;\n  hasEvenY(): boolean;\n  toRawBytes(isCompressed?: boolean): Uint8Array;\n  toHex(isCompressed?: boolean): string;\n\n  multiplyUnsafe(scalar: bigint): ProjPointType<T>;\n  multiplyAndAddUnsafe(Q: ProjPointType<T>, a: bigint, b: bigint): ProjPointType<T> | undefined;\n  _setWindowSize(windowSize: number): void;\n}\n// Static methods for 3d XYZ points\nexport interface ProjConstructor<T> extends GroupConstructor<ProjPointType<T>> {\n  new (x: T, y: T, z: T): ProjPointType<T>;\n  fromAffine(p: AffinePoint<T>): ProjPointType<T>;\n  fromHex(hex: Hex): ProjPointType<T>;\n  fromPrivateKey(privateKey: PrivKey): ProjPointType<T>;\n  normalizeZ(points: ProjPointType<T>[]): ProjPointType<T>[];\n}\n\nexport type CurvePointsType<T> = BasicWCurve<T> & {\n  // Bytes\n  fromBytes?: (bytes: Uint8Array) => AffinePoint<T>;\n  toBytes?: (c: ProjConstructor<T>, point: ProjPointType<T>, isCompressed: boolean) => Uint8Array;\n};\n\nfunction validatePointOpts<T>(curve: CurvePointsType<T>) {\n  const opts = validateBasic(curve);\n  ut.validateObject(\n    opts,\n    {\n      a: 'field',\n      b: 'field',\n    },\n    {\n      allowedPrivateKeyLengths: 'array',\n      wrapPrivateKey: 'boolean',\n      isTorsionFree: 'function',\n      clearCofactor: 'function',\n      allowInfinityPoint: 'boolean',\n      fromBytes: 'function',\n      toBytes: 'function',\n    }\n  );\n  const { endo, Fp, a } = opts;\n  if (endo) {\n    if (!Fp.eql(a, Fp.ZERO)) {\n      throw new Error('Endomorphism can only be defined for Koblitz curves that have a=0');\n    }\n    if (\n      typeof endo !== 'object' ||\n      typeof endo.beta !== 'bigint' ||\n      typeof endo.splitScalar !== 'function'\n    ) {\n      throw new Error('Expected endomorphism with beta: bigint and splitScalar: function');\n    }\n  }\n  return Object.freeze({ ...opts } as const);\n}\n\nexport type CurvePointsRes<T> = {\n  ProjectivePoint: ProjConstructor<T>;\n  normPrivateKeyToScalar: (key: PrivKey) => bigint;\n  weierstrassEquation: (x: T) => T;\n  isWithinCurveOrder: (num: bigint) => boolean;\n};\n\n// ASN.1 DER encoding utilities\nconst { bytesToNumberBE: b2n, hexToBytes: h2b } = ut;\nexport const DER = {\n  // asn.1 DER encoding utils\n  Err: class DERErr extends Error {\n    constructor(m = '') {\n      super(m);\n    }\n  },\n  _parseInt(data: Uint8Array): { d: bigint; l: Uint8Array } {\n    const { Err: E } = DER;\n    if (data.length < 2 || data[0] !== 0x02) throw new E('Invalid signature integer tag');\n    const len = data[1];\n    const res = data.subarray(2, len + 2);\n    if (!len || res.length !== len) throw new E('Invalid signature integer: wrong length');\n    // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n    // since we always use positive integers here. It must always be empty:\n    // - add zero byte if exists\n    // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n    if (res[0] & 0b10000000) throw new E('Invalid signature integer: negative');\n    if (res[0] === 0x00 && !(res[1] & 0b10000000))\n      throw new E('Invalid signature integer: unnecessary leading zero');\n    return { d: b2n(res), l: data.subarray(len + 2) }; // d is data, l is left\n  },\n  toSig(hex: string | Uint8Array): { r: bigint; s: bigint } {\n    // parse DER signature\n    const { Err: E } = DER;\n    const data = typeof hex === 'string' ? h2b(hex) : hex;\n    if (!(data instanceof Uint8Array)) throw new Error('ui8a expected');\n    let l = data.length;\n    if (l < 2 || data[0] != 0x30) throw new E('Invalid signature tag');\n    if (data[1] !== l - 2) throw new E('Invalid signature: incorrect length');\n    const { d: r, l: sBytes } = DER._parseInt(data.subarray(2));\n    const { d: s, l: rBytesLeft } = DER._parseInt(sBytes);\n    if (rBytesLeft.length) throw new E('Invalid signature: left bytes after parsing');\n    return { r, s };\n  },\n  hexFromSig(sig: { r: bigint; s: bigint }): string {\n    // Add leading zero if first byte has negative bit enabled. More details in '_parseInt'\n    const slice = (s: string): string => (Number.parseInt(s[0], 16) & 0b1000 ? '00' + s : s);\n    const h = (num: number | bigint) => {\n      const hex = num.toString(16);\n      return hex.length & 1 ? `0${hex}` : hex;\n    };\n    const s = slice(h(sig.s));\n    const r = slice(h(sig.r));\n    const shl = s.length / 2;\n    const rhl = r.length / 2;\n    const sl = h(shl);\n    const rl = h(rhl);\n    return `30${h(rhl + shl + 4)}02${rl}${r}02${sl}${s}`;\n  },\n};\n\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\n\nexport function weierstrassPoints<T>(opts: CurvePointsType<T>) {\n  const CURVE = validatePointOpts(opts);\n  const { Fp } = CURVE; // All curves has same field / group length as for now, but they can differ\n\n  const toBytes =\n    CURVE.toBytes ||\n    ((c: ProjConstructor<T>, point: ProjPointType<T>, isCompressed: boolean) => {\n      const a = point.toAffine();\n      return ut.concatBytes(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));\n    });\n  const fromBytes =\n    CURVE.fromBytes ||\n    ((bytes: Uint8Array) => {\n      // const head = bytes[0];\n      const tail = bytes.subarray(1);\n      // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');\n      const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n      const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n      return { x, y };\n    });\n\n  /**\n   * y² = x³ + ax + b: Short weierstrass curve formula\n   * @returns y²\n   */\n  function weierstrassEquation(x: T): T {\n    const { a, b } = CURVE;\n    const x2 = Fp.sqr(x); // x * x\n    const x3 = Fp.mul(x2, x); // x2 * x\n    return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b\n  }\n  // Validate whether the passed curve params are valid.\n  // We check if curve equation works for generator point.\n  // `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.\n  // ProjectivePoint class has not been initialized yet.\n  if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))\n    throw new Error('bad generator point: equation left != right');\n\n  // Valid group elements reside in range 1..n-1\n  function isWithinCurveOrder(num: bigint): boolean {\n    return typeof num === 'bigint' && _0n < num && num < CURVE.n;\n  }\n  function assertGE(num: bigint) {\n    if (!isWithinCurveOrder(num)) throw new Error('Expected valid bigint: 0 < bigint < curve.n');\n  }\n  // Validates if priv key is valid and converts it to bigint.\n  // Supports options allowedPrivateKeyLengths and wrapPrivateKey.\n  function normPrivateKeyToScalar(key: PrivKey): bigint {\n    const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n } = CURVE;\n    if (lengths && typeof key !== 'bigint') {\n      if (key instanceof Uint8Array) key = ut.bytesToHex(key);\n      // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes\n      if (typeof key !== 'string' || !lengths.includes(key.length)) throw new Error('Invalid key');\n      key = key.padStart(nByteLength * 2, '0');\n    }\n    let num: bigint;\n    try {\n      num =\n        typeof key === 'bigint'\n          ? key\n          : ut.bytesToNumberBE(ensureBytes('private key', key, nByteLength));\n    } catch (error) {\n      throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);\n    }\n    if (wrapPrivateKey) num = mod.mod(num, n); // disabled by default, enabled for BLS\n    assertGE(num); // num in range [1..N-1]\n    return num;\n  }\n\n  const pointPrecomputes = new Map<Point, Point[]>();\n  function assertPrjPoint(other: unknown) {\n    if (!(other instanceof Point)) throw new Error('ProjectivePoint expected');\n  }\n  /**\n   * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)\n   * Default Point works in 2d / affine coordinates: (x, y)\n   * We're doing calculations in projective, because its operations don't require costly inversion.\n   */\n  class Point implements ProjPointType<T> {\n    static readonly BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n    static readonly ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);\n\n    constructor(readonly px: T, readonly py: T, readonly pz: T) {\n      if (px == null || !Fp.isValid(px)) throw new Error('x required');\n      if (py == null || !Fp.isValid(py)) throw new Error('y required');\n      if (pz == null || !Fp.isValid(pz)) throw new Error('z required');\n    }\n\n    // Does not validate if the point is on-curve.\n    // Use fromHex instead, or call assertValidity() later.\n    static fromAffine(p: AffinePoint<T>): Point {\n      const { x, y } = p || {};\n      if (!p || !Fp.isValid(x) || !Fp.isValid(y)) throw new Error('invalid affine point');\n      if (p instanceof Point) throw new Error('projective point not allowed');\n      const is0 = (i: T) => Fp.eql(i, Fp.ZERO);\n      // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)\n      if (is0(x) && is0(y)) return Point.ZERO;\n      return new Point(x, y, Fp.ONE);\n    }\n\n    get x(): T {\n      return this.toAffine().x;\n    }\n    get y(): T {\n      return this.toAffine().y;\n    }\n\n    /**\n     * Takes a bunch of Projective Points but executes only one\n     * inversion on all of them. Inversion is very slow operation,\n     * so this improves performance massively.\n     * Optimization: converts a list of projective points to a list of identical points with Z=1.\n     */\n    static normalizeZ(points: Point[]): Point[] {\n      const toInv = Fp.invertBatch(points.map((p) => p.pz));\n      return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n    }\n\n    /**\n     * Converts hash string or Uint8Array to Point.\n     * @param hex short/long ECDSA hex\n     */\n    static fromHex(hex: Hex): Point {\n      const P = Point.fromAffine(fromBytes(ensureBytes('pointHex', hex)));\n      P.assertValidity();\n      return P;\n    }\n\n    // Multiplies generator point by privateKey.\n    static fromPrivateKey(privateKey: PrivKey) {\n      return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\n    }\n\n    // We calculate precomputes for elliptic curve point multiplication\n    // using windowed method. This specifies window size and\n    // stores precomputed values. Usually only base point would be precomputed.\n    _WINDOW_SIZE?: number;\n\n    // \"Private method\", don't use it directly\n    _setWindowSize(windowSize: number) {\n      this._WINDOW_SIZE = windowSize;\n      pointPrecomputes.delete(this);\n    }\n\n    // A point on curve is valid if it conforms to equation.\n    assertValidity(): void {\n      // Zero is valid point too!\n      if (this.is0()) {\n        if (CURVE.allowInfinityPoint) return;\n        throw new Error('bad point: ZERO');\n      }\n      // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n      const { x, y } = this.toAffine();\n      // Check if x, y are valid field elements\n      if (!Fp.isValid(x) || !Fp.isValid(y)) throw new Error('bad point: x or y not FE');\n      const left = Fp.sqr(y); // y²\n      const right = weierstrassEquation(x); // x³ + ax + b\n      if (!Fp.eql(left, right)) throw new Error('bad point: equation left != right');\n      if (!this.isTorsionFree()) throw new Error('bad point: not in prime-order subgroup');\n    }\n    hasEvenY(): boolean {\n      const { y } = this.toAffine();\n      if (Fp.isOdd) return !Fp.isOdd(y);\n      throw new Error(\"Field doesn't support isOdd\");\n    }\n\n    /**\n     * Compare one point to another.\n     */\n    equals(other: Point): boolean {\n      assertPrjPoint(other);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      const { px: X2, py: Y2, pz: Z2 } = other;\n      const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n      const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n      return U1 && U2;\n    }\n\n    /**\n     * Flips point to one corresponding to (x, -y) in Affine coordinates.\n     */\n    negate(): Point {\n      return new Point(this.px, Fp.neg(this.py), this.pz);\n    }\n\n    // Renes-Costello-Batina exception-free doubling formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 3\n    // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n    double() {\n      const { a, b } = CURVE;\n      const b3 = Fp.mul(b, _3n);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n      let t0 = Fp.mul(X1, X1); // step 1\n      let t1 = Fp.mul(Y1, Y1);\n      let t2 = Fp.mul(Z1, Z1);\n      let t3 = Fp.mul(X1, Y1);\n      t3 = Fp.add(t3, t3); // step 5\n      Z3 = Fp.mul(X1, Z1);\n      Z3 = Fp.add(Z3, Z3);\n      X3 = Fp.mul(a, Z3);\n      Y3 = Fp.mul(b3, t2);\n      Y3 = Fp.add(X3, Y3); // step 10\n      X3 = Fp.sub(t1, Y3);\n      Y3 = Fp.add(t1, Y3);\n      Y3 = Fp.mul(X3, Y3);\n      X3 = Fp.mul(t3, X3);\n      Z3 = Fp.mul(b3, Z3); // step 15\n      t2 = Fp.mul(a, t2);\n      t3 = Fp.sub(t0, t2);\n      t3 = Fp.mul(a, t3);\n      t3 = Fp.add(t3, Z3);\n      Z3 = Fp.add(t0, t0); // step 20\n      t0 = Fp.add(Z3, t0);\n      t0 = Fp.add(t0, t2);\n      t0 = Fp.mul(t0, t3);\n      Y3 = Fp.add(Y3, t0);\n      t2 = Fp.mul(Y1, Z1); // step 25\n      t2 = Fp.add(t2, t2);\n      t0 = Fp.mul(t2, t3);\n      X3 = Fp.sub(X3, t0);\n      Z3 = Fp.mul(t2, t1);\n      Z3 = Fp.add(Z3, Z3); // step 30\n      Z3 = Fp.add(Z3, Z3);\n      return new Point(X3, Y3, Z3);\n    }\n\n    // Renes-Costello-Batina exception-free addition formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 1\n    // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n    add(other: Point): Point {\n      assertPrjPoint(other);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      const { px: X2, py: Y2, pz: Z2 } = other;\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n      const a = CURVE.a;\n      const b3 = Fp.mul(CURVE.b, _3n);\n      let t0 = Fp.mul(X1, X2); // step 1\n      let t1 = Fp.mul(Y1, Y2);\n      let t2 = Fp.mul(Z1, Z2);\n      let t3 = Fp.add(X1, Y1);\n      let t4 = Fp.add(X2, Y2); // step 5\n      t3 = Fp.mul(t3, t4);\n      t4 = Fp.add(t0, t1);\n      t3 = Fp.sub(t3, t4);\n      t4 = Fp.add(X1, Z1);\n      let t5 = Fp.add(X2, Z2); // step 10\n      t4 = Fp.mul(t4, t5);\n      t5 = Fp.add(t0, t2);\n      t4 = Fp.sub(t4, t5);\n      t5 = Fp.add(Y1, Z1);\n      X3 = Fp.add(Y2, Z2); // step 15\n      t5 = Fp.mul(t5, X3);\n      X3 = Fp.add(t1, t2);\n      t5 = Fp.sub(t5, X3);\n      Z3 = Fp.mul(a, t4);\n      X3 = Fp.mul(b3, t2); // step 20\n      Z3 = Fp.add(X3, Z3);\n      X3 = Fp.sub(t1, Z3);\n      Z3 = Fp.add(t1, Z3);\n      Y3 = Fp.mul(X3, Z3);\n      t1 = Fp.add(t0, t0); // step 25\n      t1 = Fp.add(t1, t0);\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.mul(b3, t4);\n      t1 = Fp.add(t1, t2);\n      t2 = Fp.sub(t0, t2); // step 30\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.add(t4, t2);\n      t0 = Fp.mul(t1, t4);\n      Y3 = Fp.add(Y3, t0);\n      t0 = Fp.mul(t5, t4); // step 35\n      X3 = Fp.mul(t3, X3);\n      X3 = Fp.sub(X3, t0);\n      t0 = Fp.mul(t3, t1);\n      Z3 = Fp.mul(t5, Z3);\n      Z3 = Fp.add(Z3, t0); // step 40\n      return new Point(X3, Y3, Z3);\n    }\n\n    subtract(other: Point) {\n      return this.add(other.negate());\n    }\n\n    private is0() {\n      return this.equals(Point.ZERO);\n    }\n    private wNAF(n: bigint): { p: Point; f: Point } {\n      return wnaf.wNAFCached(this, pointPrecomputes, n, (comp: Point[]) => {\n        const toInv = Fp.invertBatch(comp.map((p) => p.pz));\n        return comp.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n      });\n    }\n\n    /**\n     * Non-constant-time multiplication. Uses double-and-add algorithm.\n     * It's faster, but should only be used when you don't care about\n     * an exposed private key e.g. sig verification, which works over *public* keys.\n     */\n    multiplyUnsafe(n: bigint): Point {\n      const I = Point.ZERO;\n      if (n === _0n) return I;\n      assertGE(n); // Will throw on 0\n      if (n === _1n) return this;\n      const { endo } = CURVE;\n      if (!endo) return wnaf.unsafeLadder(this, n);\n\n      // Apply endomorphism\n      let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n      let k1p = I;\n      let k2p = I;\n      let d: Point = this;\n      while (k1 > _0n || k2 > _0n) {\n        if (k1 & _1n) k1p = k1p.add(d);\n        if (k2 & _1n) k2p = k2p.add(d);\n        d = d.double();\n        k1 >>= _1n;\n        k2 >>= _1n;\n      }\n      if (k1neg) k1p = k1p.negate();\n      if (k2neg) k2p = k2p.negate();\n      k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n      return k1p.add(k2p);\n    }\n\n    /**\n     * Constant time multiplication.\n     * Uses wNAF method. Windowed method may be 10% faster,\n     * but takes 2x longer to generate and consumes 2x memory.\n     * Uses precomputes when available.\n     * Uses endomorphism for Koblitz curves.\n     * @param scalar by which the point would be multiplied\n     * @returns New point\n     */\n    multiply(scalar: bigint): Point {\n      assertGE(scalar);\n      let n = scalar;\n      let point: Point, fake: Point; // Fake point is used to const-time mult\n      const { endo } = CURVE;\n      if (endo) {\n        const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n        let { p: k1p, f: f1p } = this.wNAF(k1);\n        let { p: k2p, f: f2p } = this.wNAF(k2);\n        k1p = wnaf.constTimeNegate(k1neg, k1p);\n        k2p = wnaf.constTimeNegate(k2neg, k2p);\n        k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n        point = k1p.add(k2p);\n        fake = f1p.add(f2p);\n      } else {\n        const { p, f } = this.wNAF(n);\n        point = p;\n        fake = f;\n      }\n      // Normalize `z` for both points, but return only real one\n      return Point.normalizeZ([point, fake])[0];\n    }\n\n    /**\n     * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.\n     * Not using Strauss-Shamir trick: precomputation tables are faster.\n     * The trick could be useful if both P and Q are not G (not in our case).\n     * @returns non-zero affine point\n     */\n    multiplyAndAddUnsafe(Q: Point, a: bigint, b: bigint): Point | undefined {\n      const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes\n      const mul = (\n        P: Point,\n        a: bigint // Select faster multiply() method\n      ) => (a === _0n || a === _1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a));\n      const sum = mul(this, a).add(mul(Q, b));\n      return sum.is0() ? undefined : sum;\n    }\n\n    // Converts Projective point to affine (x, y) coordinates.\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\n    // (x, y, z) ∋ (x=x/z, y=y/z)\n    toAffine(iz?: T): AffinePoint<T> {\n      const { px: x, py: y, pz: z } = this;\n      const is0 = this.is0();\n      // If invZ was 0, we return zero point. However we still want to execute\n      // all operations, so we replace invZ with a random number, 1.\n      if (iz == null) iz = is0 ? Fp.ONE : Fp.inv(z);\n      const ax = Fp.mul(x, iz);\n      const ay = Fp.mul(y, iz);\n      const zz = Fp.mul(z, iz);\n      if (is0) return { x: Fp.ZERO, y: Fp.ZERO };\n      if (!Fp.eql(zz, Fp.ONE)) throw new Error('invZ was invalid');\n      return { x: ax, y: ay };\n    }\n    isTorsionFree(): boolean {\n      const { h: cofactor, isTorsionFree } = CURVE;\n      if (cofactor === _1n) return true; // No subgroups, always torsion-free\n      if (isTorsionFree) return isTorsionFree(Point, this);\n      throw new Error('isTorsionFree() has not been declared for the elliptic curve');\n    }\n    clearCofactor(): Point {\n      const { h: cofactor, clearCofactor } = CURVE;\n      if (cofactor === _1n) return this; // Fast-path\n      if (clearCofactor) return clearCofactor(Point, this) as Point;\n      return this.multiplyUnsafe(CURVE.h);\n    }\n\n    toRawBytes(isCompressed = true): Uint8Array {\n      this.assertValidity();\n      return toBytes(Point, this, isCompressed);\n    }\n\n    toHex(isCompressed = true): string {\n      return ut.bytesToHex(this.toRawBytes(isCompressed));\n    }\n  }\n  const _bits = CURVE.nBitLength;\n  const wnaf = wNAF(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);\n  // Validate if generator point is on curve\n  return {\n    CURVE,\n    ProjectivePoint: Point as ProjConstructor<T>,\n    normPrivateKeyToScalar,\n    weierstrassEquation,\n    isWithinCurveOrder,\n  };\n}\n\n// Instance\nexport interface SignatureType {\n  readonly r: bigint;\n  readonly s: bigint;\n  readonly recovery?: number;\n  assertValidity(): void;\n  addRecoveryBit(recovery: number): RecoveredSignatureType;\n  hasHighS(): boolean;\n  normalizeS(): SignatureType;\n  recoverPublicKey(msgHash: Hex): ProjPointType<bigint>;\n  toCompactRawBytes(): Uint8Array;\n  toCompactHex(): string;\n  // DER-encoded\n  toDERRawBytes(isCompressed?: boolean): Uint8Array;\n  toDERHex(isCompressed?: boolean): string;\n}\nexport type RecoveredSignatureType = SignatureType & {\n  readonly recovery: number;\n};\n// Static methods\nexport type SignatureConstructor = {\n  new (r: bigint, s: bigint): SignatureType;\n  fromCompact(hex: Hex): SignatureType;\n  fromDER(hex: Hex): SignatureType;\n};\ntype SignatureLike = { r: bigint; s: bigint };\n\nexport type PubKey = Hex | ProjPointType<bigint>;\n\nexport type CurveType = BasicWCurve<bigint> & {\n  hash: CHash; // CHash not FHash because we need outputLen for DRBG\n  hmac: HmacFnSync;\n  randomBytes: (bytesLength?: number) => Uint8Array;\n  lowS?: boolean;\n  bits2int?: (bytes: Uint8Array) => bigint;\n  bits2int_modN?: (bytes: Uint8Array) => bigint;\n};\n\nfunction validateOpts(curve: CurveType) {\n  const opts = validateBasic(curve);\n  ut.validateObject(\n    opts,\n    {\n      hash: 'hash',\n      hmac: 'function',\n      randomBytes: 'function',\n    },\n    {\n      bits2int: 'function',\n      bits2int_modN: 'function',\n      lowS: 'boolean',\n    }\n  );\n  return Object.freeze({ lowS: true, ...opts } as const);\n}\n\nexport type CurveFn = {\n  CURVE: ReturnType<typeof validateOpts>;\n  getPublicKey: (privateKey: PrivKey, isCompressed?: boolean) => Uint8Array;\n  getSharedSecret: (privateA: PrivKey, publicB: Hex, isCompressed?: boolean) => Uint8Array;\n  sign: (msgHash: Hex, privKey: PrivKey, opts?: SignOpts) => RecoveredSignatureType;\n  verify: (signature: Hex | SignatureLike, msgHash: Hex, publicKey: Hex, opts?: VerOpts) => boolean;\n  ProjectivePoint: ProjConstructor<bigint>;\n  Signature: SignatureConstructor;\n  utils: {\n    normPrivateKeyToScalar: (key: PrivKey) => bigint;\n    isValidPrivateKey(privateKey: PrivKey): boolean;\n    randomPrivateKey: () => Uint8Array;\n    precompute: (windowSize?: number, point?: ProjPointType<bigint>) => ProjPointType<bigint>;\n  };\n};\n\nexport function weierstrass(curveDef: CurveType): CurveFn {\n  const CURVE = validateOpts(curveDef) as ReturnType<typeof validateOpts>;\n  const { Fp, n: CURVE_ORDER } = CURVE;\n  const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32\n  const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32\n\n  function isValidFieldElement(num: bigint): boolean {\n    return _0n < num && num < Fp.ORDER; // 0 is banned since it's not invertible FE\n  }\n  function modN(a: bigint) {\n    return mod.mod(a, CURVE_ORDER);\n  }\n  function invN(a: bigint) {\n    return mod.invert(a, CURVE_ORDER);\n  }\n\n  const {\n    ProjectivePoint: Point,\n    normPrivateKeyToScalar,\n    weierstrassEquation,\n    isWithinCurveOrder,\n  } = weierstrassPoints({\n    ...CURVE,\n    toBytes(c, point, isCompressed: boolean): Uint8Array {\n      const a = point.toAffine();\n      const x = Fp.toBytes(a.x);\n      const cat = ut.concatBytes;\n      if (isCompressed) {\n        return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);\n      } else {\n        return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));\n      }\n    },\n    fromBytes(bytes: Uint8Array) {\n      const len = bytes.length;\n      const head = bytes[0];\n      const tail = bytes.subarray(1);\n      // this.assertValidity() is done inside of fromHex\n      if (len === compressedLen && (head === 0x02 || head === 0x03)) {\n        const x = ut.bytesToNumberBE(tail);\n        if (!isValidFieldElement(x)) throw new Error('Point is not on curve');\n        const y2 = weierstrassEquation(x); // y² = x³ + ax + b\n        let y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\n        const isYOdd = (y & _1n) === _1n;\n        // ECDSA\n        const isHeadOdd = (head & 1) === 1;\n        if (isHeadOdd !== isYOdd) y = Fp.neg(y);\n        return { x, y };\n      } else if (len === uncompressedLen && head === 0x04) {\n        const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n        const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n        return { x, y };\n      } else {\n        throw new Error(\n          `Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`\n        );\n      }\n    },\n  });\n  const numToNByteStr = (num: bigint): string =>\n    ut.bytesToHex(ut.numberToBytesBE(num, CURVE.nByteLength));\n\n  function isBiggerThanHalfOrder(number: bigint) {\n    const HALF = CURVE_ORDER >> _1n;\n    return number > HALF;\n  }\n\n  function normalizeS(s: bigint) {\n    return isBiggerThanHalfOrder(s) ? modN(-s) : s;\n  }\n  // slice bytes num\n  const slcNum = (b: Uint8Array, from: number, to: number) => ut.bytesToNumberBE(b.slice(from, to));\n\n  /**\n   * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\n   */\n  class Signature implements SignatureType {\n    constructor(readonly r: bigint, readonly s: bigint, readonly recovery?: number) {\n      this.assertValidity();\n    }\n\n    // pair (bytes of r, bytes of s)\n    static fromCompact(hex: Hex) {\n      const l = CURVE.nByteLength;\n      hex = ensureBytes('compactSignature', hex, l * 2);\n      return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));\n    }\n\n    // DER encoded ECDSA signature\n    // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\n    static fromDER(hex: Hex) {\n      const { r, s } = DER.toSig(ensureBytes('DER', hex));\n      return new Signature(r, s);\n    }\n\n    assertValidity(): void {\n      // can use assertGE here\n      if (!isWithinCurveOrder(this.r)) throw new Error('r must be 0 < r < CURVE.n');\n      if (!isWithinCurveOrder(this.s)) throw new Error('s must be 0 < s < CURVE.n');\n    }\n\n    addRecoveryBit(recovery: number): RecoveredSignature {\n      return new Signature(this.r, this.s, recovery) as RecoveredSignature;\n    }\n\n    recoverPublicKey(msgHash: Hex): typeof Point.BASE {\n      const { r, s, recovery: rec } = this;\n      const h = bits2int_modN(ensureBytes('msgHash', msgHash)); // Truncate hash\n      if (rec == null || ![0, 1, 2, 3].includes(rec)) throw new Error('recovery id invalid');\n      const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;\n      if (radj >= Fp.ORDER) throw new Error('recovery id 2 or 3 invalid');\n      const prefix = (rec & 1) === 0 ? '02' : '03';\n      const R = Point.fromHex(prefix + numToNByteStr(radj));\n      const ir = invN(radj); // r^-1\n      const u1 = modN(-h * ir); // -hr^-1\n      const u2 = modN(s * ir); // sr^-1\n      const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)\n      if (!Q) throw new Error('point at infinify'); // unsafe is fine: no priv data leaked\n      Q.assertValidity();\n      return Q;\n    }\n\n    // Signatures should be low-s, to prevent malleability.\n    hasHighS(): boolean {\n      return isBiggerThanHalfOrder(this.s);\n    }\n\n    normalizeS() {\n      return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;\n    }\n\n    // DER-encoded\n    toDERRawBytes() {\n      return ut.hexToBytes(this.toDERHex());\n    }\n    toDERHex() {\n      return DER.hexFromSig({ r: this.r, s: this.s });\n    }\n\n    // padded bytes of r, then padded bytes of s\n    toCompactRawBytes() {\n      return ut.hexToBytes(this.toCompactHex());\n    }\n    toCompactHex() {\n      return numToNByteStr(this.r) + numToNByteStr(this.s);\n    }\n  }\n  type RecoveredSignature = Signature & { recovery: number };\n\n  const utils = {\n    isValidPrivateKey(privateKey: PrivKey) {\n      try {\n        normPrivateKeyToScalar(privateKey);\n        return true;\n      } catch (error) {\n        return false;\n      }\n    },\n    normPrivateKeyToScalar: normPrivateKeyToScalar,\n\n    /**\n     * Produces cryptographically secure private key from random of size (nBitLength+64)\n     * as per FIPS 186 B.4.1 with modulo bias being neglible.\n     */\n    randomPrivateKey: (): Uint8Array => {\n      const rand = CURVE.randomBytes(Fp.BYTES + 8);\n      const num = mod.hashToPrivateScalar(rand, CURVE_ORDER);\n      return ut.numberToBytesBE(num, CURVE.nByteLength);\n    },\n\n    /**\n     * Creates precompute table for an arbitrary EC point. Makes point \"cached\".\n     * Allows to massively speed-up `point.multiply(scalar)`.\n     * @returns cached point\n     * @example\n     * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));\n     * fast.multiply(privKey); // much faster ECDH now\n     */\n    precompute(windowSize = 8, point = Point.BASE): typeof Point.BASE {\n      point._setWindowSize(windowSize);\n      point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here\n      return point;\n    },\n  };\n\n  /**\n   * Computes public key for a private key. Checks for validity of the private key.\n   * @param privateKey private key\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns Public key, full when isCompressed=false; short when isCompressed=true\n   */\n  function getPublicKey(privateKey: PrivKey, isCompressed = true): Uint8Array {\n    return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n  }\n\n  /**\n   * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n   */\n  function isProbPub(item: PrivKey | PubKey): boolean {\n    const arr = item instanceof Uint8Array;\n    const str = typeof item === 'string';\n    const len = (arr || str) && (item as Hex).length;\n    if (arr) return len === compressedLen || len === uncompressedLen;\n    if (str) return len === 2 * compressedLen || len === 2 * uncompressedLen;\n    if (item instanceof Point) return true;\n    return false;\n  }\n\n  /**\n   * ECDH (Elliptic Curve Diffie Hellman).\n   * Computes shared public key from private key and public key.\n   * Checks: 1) private key validity 2) shared key is on-curve.\n   * Does NOT hash the result.\n   * @param privateA private key\n   * @param publicB different public key\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns shared public key\n   */\n  function getSharedSecret(privateA: PrivKey, publicB: Hex, isCompressed = true): Uint8Array {\n    if (isProbPub(privateA)) throw new Error('first arg must be private key');\n    if (!isProbPub(publicB)) throw new Error('second arg must be public key');\n    const b = Point.fromHex(publicB); // check for being on-curve\n    return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);\n  }\n\n  // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n  // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n  // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n  // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n  const bits2int =\n    CURVE.bits2int ||\n    function (bytes: Uint8Array): bigint {\n      // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n      // for some cases, since bytes.length * 8 is not actual bitLength.\n      const num = ut.bytesToNumberBE(bytes); // check for == u8 done here\n      const delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits\n      return delta > 0 ? num >> BigInt(delta) : num;\n    };\n  const bits2int_modN =\n    CURVE.bits2int_modN ||\n    function (bytes: Uint8Array): bigint {\n      return modN(bits2int(bytes)); // can't use bytesToNumberBE here\n    };\n  // NOTE: pads output with zero as per spec\n  const ORDER_MASK = ut.bitMask(CURVE.nBitLength);\n  /**\n   * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\n   */\n  function int2octets(num: bigint): Uint8Array {\n    if (typeof num !== 'bigint') throw new Error('bigint expected');\n    if (!(_0n <= num && num < ORDER_MASK))\n      throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);\n    // works with order, can have different size than numToField!\n    return ut.numberToBytesBE(num, CURVE.nByteLength);\n  }\n\n  // Steps A, D of RFC6979 3.2\n  // Creates RFC6979 seed; converts msg/privKey to numbers.\n  // Used only in sign, not in verify.\n  // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order, this will be wrong at least for P521.\n  // Also it can be bigger for P224 + SHA256\n  function prepSig(msgHash: Hex, privateKey: PrivKey, opts = defaultSigOpts) {\n    if (['recovered', 'canonical'].some((k) => k in opts))\n      throw new Error('sign() legacy options not supported');\n    const { hash, randomBytes } = CURVE;\n    let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default\n    if (lowS == null) lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\n    msgHash = ensureBytes('msgHash', msgHash);\n    if (prehash) msgHash = ensureBytes('prehashed msgHash', hash(msgHash));\n\n    // We can't later call bits2octets, since nested bits2int is broken for curves\n    // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n    // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n    const h1int = bits2int_modN(msgHash);\n    const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\n    const seedArgs = [int2octets(d), int2octets(h1int)];\n    // extraEntropy. RFC6979 3.6: additional k' (optional).\n    if (ent != null) {\n      // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n      const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is\n      seedArgs.push(ensureBytes('extraEntropy', e, Fp.BYTES)); // check for being of size BYTES\n    }\n    const seed = ut.concatBytes(...seedArgs); // Step D of RFC6979 3.2\n    const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n    // Converts signature params into point w r/s, checks result for validity.\n    function k2sig(kBytes: Uint8Array): RecoveredSignature | undefined {\n      // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n      const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\n      if (!isWithinCurveOrder(k)) return; // Important: all mod() calls here must be done over N\n      const ik = invN(k); // k^-1 mod n\n      const q = Point.BASE.multiply(k).toAffine(); // q = Gk\n      const r = modN(q.x); // r = q.x mod n\n      if (r === _0n) return;\n      // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\n      // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n      // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n      const s = modN(ik * modN(m + r * d)); // Not using blinding here\n      if (s === _0n) return;\n      let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n      let normS = s;\n      if (lowS && isBiggerThanHalfOrder(s)) {\n        normS = normalizeS(s); // if lowS was passed, ensure s is always\n        recovery ^= 1; // // in the bottom half of N\n      }\n      return new Signature(r, normS, recovery) as RecoveredSignature; // use normS, not s\n    }\n    return { seed, k2sig };\n  }\n  const defaultSigOpts: SignOpts = { lowS: CURVE.lowS, prehash: false };\n  const defaultVerOpts: VerOpts = { lowS: CURVE.lowS, prehash: false };\n\n  /**\n   * Signs message hash with a private key.\n   * ```\n   * sign(m, d, k) where\n   *   (x, y) = G × k\n   *   r = x mod n\n   *   s = (m + dr)/k mod n\n   * ```\n   * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.\n   * @param privKey private key\n   * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.\n   * @returns signature with recovery param\n   */\n  function sign(msgHash: Hex, privKey: PrivKey, opts = defaultSigOpts): RecoveredSignature {\n    const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.\n    const C = CURVE;\n    const drbg = ut.createHmacDrbg<RecoveredSignature>(C.hash.outputLen, C.nByteLength, C.hmac);\n    return drbg(seed, k2sig); // Steps B, C, D, E, F, G\n  }\n\n  // Enable precomputes. Slows down first publicKey computation by 20ms.\n  Point.BASE._setWindowSize(8);\n  // utils.precompute(8, ProjectivePoint.BASE)\n\n  /**\n   * Verifies a signature against message hash and public key.\n   * Rejects lowS signatures by default: to override,\n   * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n   *\n   * ```\n   * verify(r, s, h, P) where\n   *   U1 = hs^-1 mod n\n   *   U2 = rs^-1 mod n\n   *   R = U1⋅G - U2⋅P\n   *   mod(R.x, n) == r\n   * ```\n   */\n  function verify(\n    signature: Hex | SignatureLike,\n    msgHash: Hex,\n    publicKey: Hex,\n    opts = defaultVerOpts\n  ): boolean {\n    const sg = signature;\n    msgHash = ensureBytes('msgHash', msgHash);\n    publicKey = ensureBytes('publicKey', publicKey);\n    if ('strict' in opts) throw new Error('options.strict was renamed to lowS');\n    const { lowS, prehash } = opts;\n\n    let _sig: Signature | undefined = undefined;\n    let P: ProjPointType<bigint>;\n    try {\n      if (typeof sg === 'string' || sg instanceof Uint8Array) {\n        // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).\n        // Since DER can also be 2*nByteLength bytes, we check for it first.\n        try {\n          _sig = Signature.fromDER(sg);\n        } catch (derError) {\n          if (!(derError instanceof DER.Err)) throw derError;\n          _sig = Signature.fromCompact(sg);\n        }\n      } else if (typeof sg === 'object' && typeof sg.r === 'bigint' && typeof sg.s === 'bigint') {\n        const { r, s } = sg;\n        _sig = new Signature(r, s);\n      } else {\n        throw new Error('PARSE');\n      }\n      P = Point.fromHex(publicKey);\n    } catch (error) {\n      if ((error as Error).message === 'PARSE')\n        throw new Error(`signature must be Signature instance, Uint8Array or hex string`);\n      return false;\n    }\n    if (lowS && _sig.hasHighS()) return false;\n    if (prehash) msgHash = CURVE.hash(msgHash);\n    const { r, s } = _sig;\n    const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\n    const is = invN(s); // s^-1\n    const u1 = modN(h * is); // u1 = hs^-1 mod n\n    const u2 = modN(r * is); // u2 = rs^-1 mod n\n    const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1⋅G + u2⋅P\n    if (!R) return false;\n    const v = modN(R.x);\n    return v === r;\n  }\n  return {\n    CURVE,\n    getPublicKey,\n    getSharedSecret,\n    sign,\n    verify,\n    ProjectivePoint: Point,\n    Signature,\n    utils,\n  };\n}\n\n/**\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\n * b = False and y = sqrt(Z * (u / v)) otherwise.\n * @param Fp\n * @param Z\n * @returns\n */\nexport function SWUFpSqrtRatio<T>(Fp: mod.IField<T>, Z: T) {\n  // Generic implementation\n  const q = Fp.ORDER;\n  let l = _0n;\n  for (let o = q - _1n; o % _2n === _0n; o /= _2n) l += _1n;\n  const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n  // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\n  // 2n ** c1 == 2n << (c1-1)\n  const _2n_pow_c1_1 = _2n << (c1 - _1n - _1n);\n  const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\n  const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\n  const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n  const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n  const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\n  const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n  const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n  let sqrtRatio = (u: T, v: T): { isValid: boolean; value: T } => {\n    let tv1 = c6; // 1. tv1 = c6\n    let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n    let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n    tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n    let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n    tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n    tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n    tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n    tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n    let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n    tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n    let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n    tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n    tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n    tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n    tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n    // 17. for i in (c1, c1 - 1, ..., 2):\n    for (let i = c1; i > _1n; i--) {\n      let tv5 = i - _2n; // 18.    tv5 = i - 2\n      tv5 = _2n << (tv5 - _1n); // 19.    tv5 = 2^tv5\n      let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n      const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n      tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n      tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n      tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n      tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n      tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n    }\n    return { isValid: isQR, value: tv3 };\n  };\n  if (Fp.ORDER % _4n === _3n) {\n    // sqrt_ratio_3mod4(u, v)\n    const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n    const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n    sqrtRatio = (u: T, v: T) => {\n      let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n      const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n      tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n      let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n      y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n      const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n      const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n      const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n      let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n      return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2\n    };\n  }\n  // No curves uses that\n  // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n  return sqrtRatio;\n}\n/**\n * From draft-irtf-cfrg-hash-to-curve-16\n */\nexport function mapToCurveSimpleSWU<T>(\n  Fp: mod.IField<T>,\n  opts: {\n    A: T;\n    B: T;\n    Z: T;\n  }\n) {\n  mod.validateField(Fp);\n  if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))\n    throw new Error('mapToCurveSimpleSWU: invalid opts');\n  const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);\n  if (!Fp.isOdd) throw new Error('Fp.isOdd is not implemented!');\n  // Input: u, an element of F.\n  // Output: (x, y), a point on E.\n  return (u: T): { x: T; y: T } => {\n    // prettier-ignore\n    let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n    tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n    tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1\n    tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n    tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n    tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n    tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3\n    tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n    tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4\n    tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n    tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n    tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6\n    tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n    tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n    tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n    tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6\n    tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n    x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n    const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n    y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n    y = Fp.mul(y, value); // 20.   y = y * y1\n    x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n    y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n    const e1 = Fp.isOdd!(u) === Fp.isOdd!(y); // 23.  e1 = sgn0(u) == sgn0(y)\n    y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n    x = Fp.div(x, tv4); // 25.   x = x / tv4\n    return { x, y };\n  };\n}\n","import assert from './_assert.js';\nimport { Hash, CHash, Input, toBytes } from './utils.js';\n// HMAC (RFC 2104)\nexport class HMAC<T extends Hash<T>> extends Hash<HMAC<T>> {\n  oHash: T;\n  iHash: T;\n  blockLen: number;\n  outputLen: number;\n  private finished = false;\n  private destroyed = false;\n\n  constructor(hash: CHash, _key: Input) {\n    super();\n    assert.hash(hash);\n    const key = toBytes(_key);\n    this.iHash = hash.create() as T;\n    if (typeof this.iHash.update !== 'function')\n      throw new Error('Expected instance of class which extends utils.Hash');\n    this.blockLen = this.iHash.blockLen;\n    this.outputLen = this.iHash.outputLen;\n    const blockLen = this.blockLen;\n    const pad = new Uint8Array(blockLen);\n    // blockLen can be bigger than outputLen\n    pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36;\n    this.iHash.update(pad);\n    // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n    this.oHash = hash.create() as T;\n    // Undo internal XOR && apply outer XOR\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36 ^ 0x5c;\n    this.oHash.update(pad);\n    pad.fill(0);\n  }\n  update(buf: Input) {\n    assert.exists(this);\n    this.iHash.update(buf);\n    return this;\n  }\n  digestInto(out: Uint8Array) {\n    assert.exists(this);\n    assert.bytes(out, this.outputLen);\n    this.finished = true;\n    this.iHash.digestInto(out);\n    this.oHash.update(out);\n    this.oHash.digestInto(out);\n    this.destroy();\n  }\n  digest() {\n    const out = new Uint8Array(this.oHash.outputLen);\n    this.digestInto(out);\n    return out;\n  }\n  _cloneInto(to?: HMAC<T>): HMAC<T> {\n    // Create new instance without calling constructor since key already in state and we don't know it.\n    to ||= Object.create(Object.getPrototypeOf(this), {});\n    const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n    to = to as this;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    to.blockLen = blockLen;\n    to.outputLen = outputLen;\n    to.oHash = oHash._cloneInto(to.oHash);\n    to.iHash = iHash._cloneInto(to.iHash);\n    return to;\n  }\n  destroy() {\n    this.destroyed = true;\n    this.oHash.destroy();\n    this.iHash.destroy();\n  }\n}\n\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nexport const hmac = (hash: CHash, key: Input, message: Input): Uint8Array =>\n  new HMAC<any>(hash, key).update(message).digest();\nhmac.create = (hash: CHash, key: Input) => new HMAC<any>(hash, key);\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { hmac } from '@noble/hashes/hmac';\nimport { concatBytes, randomBytes } from '@noble/hashes/utils';\nimport { weierstrass, CurveType } from './abstract/weierstrass.js';\nimport { CHash } from './abstract/utils.js';\n\n// connects noble-curves to noble-hashes\nexport function getHash(hash: CHash) {\n  return {\n    hash,\n    hmac: (key: Uint8Array, ...msgs: Uint8Array[]) => hmac(hash, key, concatBytes(...msgs)),\n    randomBytes,\n  };\n}\n// Same API as @noble/hashes, with ability to create curve with custom hash\ntype CurveDef = Readonly<Omit<CurveType, 'hash' | 'hmac' | 'randomBytes'>>;\nexport function createCurve(curveDef: CurveDef, defHash: CHash) {\n  const create = (hash: CHash) => weierstrass({ ...curveDef, ...getHash(hash) });\n  return Object.freeze({ ...create(defHash), create });\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha256 } from '@noble/hashes/sha256';\nimport { randomBytes } from '@noble/hashes/utils';\nimport { Field, mod, pow2 } from './abstract/modular.js';\nimport { ProjPointType as PointType, mapToCurveSimpleSWU } from './abstract/weierstrass.js';\nimport type { Hex, PrivKey } from './abstract/utils.js';\nimport { bytesToNumberBE, concatBytes, ensureBytes, numberToBytesBE } from './abstract/utils.js';\nimport { createHasher, isogenyMap } from './abstract/hash-to-curve.js';\nimport { createCurve } from './_shortw_utils.js';\n\nconst secp256k1P = BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f');\nconst secp256k1N = BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141');\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst divNearest = (a: bigint, b: bigint) => (a + b / _2n) / b;\n\n/**\n * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.\n * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]\n */\nfunction sqrtMod(y: bigint): bigint {\n  const P = secp256k1P;\n  // prettier-ignore\n  const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);\n  // prettier-ignore\n  const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);\n  const b2 = (y * y * y) % P; // x^3, 11\n  const b3 = (b2 * b2 * y) % P; // x^7\n  const b6 = (pow2(b3, _3n, P) * b3) % P;\n  const b9 = (pow2(b6, _3n, P) * b3) % P;\n  const b11 = (pow2(b9, _2n, P) * b2) % P;\n  const b22 = (pow2(b11, _11n, P) * b11) % P;\n  const b44 = (pow2(b22, _22n, P) * b22) % P;\n  const b88 = (pow2(b44, _44n, P) * b44) % P;\n  const b176 = (pow2(b88, _88n, P) * b88) % P;\n  const b220 = (pow2(b176, _44n, P) * b44) % P;\n  const b223 = (pow2(b220, _3n, P) * b3) % P;\n  const t1 = (pow2(b223, _23n, P) * b22) % P;\n  const t2 = (pow2(t1, _6n, P) * b2) % P;\n  const root = pow2(t2, _2n, P);\n  if (!Fp.eql(Fp.sqr(root), y)) throw new Error('Cannot find square root');\n  return root;\n}\n\nconst Fp = Field(secp256k1P, undefined, undefined, { sqrt: sqrtMod });\n\nexport const secp256k1 = createCurve(\n  {\n    a: BigInt(0), // equation params: a, b\n    b: BigInt(7), // Seem to be rigid: bitcointalk.org/index.php?topic=289795.msg3183975#msg3183975\n    Fp, // Field's prime: 2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n\n    n: secp256k1N, // Curve order, total count of valid points in the field\n    // Base point (x, y) aka generator point\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    h: BigInt(1), // Cofactor\n    lowS: true, // Allow only low-S signatures by default in sign() and verify()\n    /**\n     * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.\n     * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.\n     * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.\n     * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066\n     */\n    endo: {\n      beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n      splitScalar: (k: bigint) => {\n        const n = secp256k1N;\n        const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n        const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n        const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n        const b2 = a1;\n        const POW_2_128 = BigInt('0x100000000000000000000000000000000'); // (2n**128n).toString(16)\n\n        const c1 = divNearest(b2 * k, n);\n        const c2 = divNearest(-b1 * k, n);\n        let k1 = mod(k - c1 * a1 - c2 * a2, n);\n        let k2 = mod(-c1 * b1 - c2 * b2, n);\n        const k1neg = k1 > POW_2_128;\n        const k2neg = k2 > POW_2_128;\n        if (k1neg) k1 = n - k1;\n        if (k2neg) k2 = n - k2;\n        if (k1 > POW_2_128 || k2 > POW_2_128) {\n          throw new Error('splitScalar: Endomorphism failed, k=' + k);\n        }\n        return { k1neg, k1, k2neg, k2 };\n      },\n    },\n  },\n  sha256\n);\n\n// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.\n// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\nconst _0n = BigInt(0);\nconst fe = (x: bigint) => typeof x === 'bigint' && _0n < x && x < secp256k1P;\nconst ge = (x: bigint) => typeof x === 'bigint' && _0n < x && x < secp256k1N;\n/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */\nconst TAGGED_HASH_PREFIXES: { [tag: string]: Uint8Array } = {};\nfunction taggedHash(tag: string, ...messages: Uint8Array[]): Uint8Array {\n  let tagP = TAGGED_HASH_PREFIXES[tag];\n  if (tagP === undefined) {\n    const tagH = sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n    tagP = concatBytes(tagH, tagH);\n    TAGGED_HASH_PREFIXES[tag] = tagP;\n  }\n  return sha256(concatBytes(tagP, ...messages));\n}\n\n// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03\nconst pointToBytes = (point: PointType<bigint>) => point.toRawBytes(true).slice(1);\nconst numTo32b = (n: bigint) => numberToBytesBE(n, 32);\nconst modP = (x: bigint) => mod(x, secp256k1P);\nconst modN = (x: bigint) => mod(x, secp256k1N);\nconst Point = secp256k1.ProjectivePoint;\nconst GmulAdd = (Q: PointType<bigint>, a: bigint, b: bigint) =>\n  Point.BASE.multiplyAndAddUnsafe(Q, a, b);\n\n// Calculate point, scalar and bytes\nfunction schnorrGetExtPubKey(priv: PrivKey) {\n  let d_ = secp256k1.utils.normPrivateKeyToScalar(priv); // same method executed in fromPrivateKey\n  let p = Point.fromPrivateKey(d_); // P = d'⋅G; 0 < d' < n check is done inside\n  const scalar = p.hasEvenY() ? d_ : modN(-d_);\n  return { scalar: scalar, bytes: pointToBytes(p) };\n}\n/**\n * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.\n * @returns valid point checked for being on-curve\n */\nfunction lift_x(x: bigint): PointType<bigint> {\n  if (!fe(x)) throw new Error('bad x: need 0 < x < p'); // Fail if x ≥ p.\n  const xx = modP(x * x);\n  const c = modP(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.\n  let y = sqrtMod(c); // Let y = c^(p+1)/4 mod p.\n  if (y % _2n !== _0n) y = modP(-y); // Return the unique point P such that x(P) = x and\n  const p = new Point(x, y, _1n); // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.\n  p.assertValidity();\n  return p;\n}\n/**\n * Create tagged hash, convert it to bigint, reduce modulo-n.\n */\nfunction challenge(...args: Uint8Array[]): bigint {\n  return modN(bytesToNumberBE(taggedHash('BIP0340/challenge', ...args)));\n}\n\n/**\n * Schnorr public key is just `x` coordinate of Point as per BIP340.\n */\nfunction schnorrGetPublicKey(privateKey: Hex): Uint8Array {\n  return schnorrGetExtPubKey(privateKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)\n}\n\n/**\n * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.\n * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.\n */\nfunction schnorrSign(\n  message: Hex,\n  privateKey: PrivKey,\n  auxRand: Hex = randomBytes(32)\n): Uint8Array {\n  const m = ensureBytes('message', message);\n  const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey); // checks for isWithinCurveOrder\n  const a = ensureBytes('auxRand', auxRand, 32); // Auxiliary random data a: a 32-byte array\n  const t = numTo32b(d ^ bytesToNumberBE(taggedHash('BIP0340/aux', a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)\n  const rand = taggedHash('BIP0340/nonce', t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)\n  const k_ = modN(bytesToNumberBE(rand)); // Let k' = int(rand) mod n\n  if (k_ === _0n) throw new Error('sign failed: k is zero'); // Fail if k' = 0.\n  const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_); // Let R = k'⋅G.\n  const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.\n  const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).\n  sig.set(rx, 0);\n  sig.set(numTo32b(modN(k + e * d)), 32);\n  // If Verify(bytes(P), m, sig) (see below) returns failure, abort\n  if (!schnorrVerify(sig, m, px)) throw new Error('sign: Invalid signature produced');\n  return sig;\n}\n\n/**\n * Verifies Schnorr signature.\n * Will swallow errors & return false except for initial type validation of arguments.\n */\nfunction schnorrVerify(signature: Hex, message: Hex, publicKey: Hex): boolean {\n  const sig = ensureBytes('signature', signature, 64);\n  const m = ensureBytes('message', message);\n  const pub = ensureBytes('publicKey', publicKey, 32);\n  try {\n    const P = lift_x(bytesToNumberBE(pub)); // P = lift_x(int(pk)); fail if that fails\n    const r = bytesToNumberBE(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.\n    if (!fe(r)) return false;\n    const s = bytesToNumberBE(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.\n    if (!ge(s)) return false;\n    const e = challenge(numTo32b(r), pointToBytes(P), m); // int(challenge(bytes(r)||bytes(P)||m))%n\n    const R = GmulAdd(P, s, modN(-e)); // R = s⋅G - e⋅P\n    if (!R || !R.hasEvenY() || R.toAffine().x !== r) return false; // -eP == (n-e)P\n    return true; // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.\n  } catch (error) {\n    return false;\n  }\n}\n\nexport const schnorr = /* @__PURE__ */ (() => ({\n  getPublicKey: schnorrGetPublicKey,\n  sign: schnorrSign,\n  verify: schnorrVerify,\n  utils: {\n    randomPrivateKey: secp256k1.utils.randomPrivateKey,\n    lift_x,\n    pointToBytes,\n    numberToBytesBE,\n    bytesToNumberBE,\n    taggedHash,\n    mod,\n  },\n}))();\n\nconst isoMap = /* @__PURE__ */ (() =>\n  isogenyMap(\n    Fp,\n    [\n      // xNum\n      [\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7',\n        '0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581',\n        '0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262',\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c',\n      ],\n      // xDen\n      [\n        '0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b',\n        '0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n      ],\n      // yNum\n      [\n        '0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c',\n        '0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3',\n        '0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931',\n        '0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84',\n      ],\n      // yDen\n      [\n        '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b',\n        '0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573',\n        '0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n      ],\n    ].map((i) => i.map((j) => BigInt(j))) as [bigint[], bigint[], bigint[], bigint[]]\n  ))();\nconst mapSWU = /* @__PURE__ */ (() =>\n  mapToCurveSimpleSWU(Fp, {\n    A: BigInt('0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533'),\n    B: BigInt('1771'),\n    Z: Fp.create(BigInt('-11')),\n  }))();\nconst htf = /* @__PURE__ */ (() =>\n  createHasher(\n    secp256k1.ProjectivePoint,\n    (scalars: bigint[]) => {\n      const { x, y } = mapSWU(Fp.create(scalars[0]));\n      return isoMap(x, y);\n    },\n    {\n      DST: 'secp256k1_XMD:SHA-256_SSWU_RO_',\n      encodeDST: 'secp256k1_XMD:SHA-256_SSWU_NU_',\n      p: Fp.ORDER,\n      m: 1,\n      k: 128,\n      expand: 'xmd',\n      hash: sha256,\n    }\n  ))();\nexport const hashToCurve = /* @__PURE__ */ (() => htf.hashToCurve)();\nexport const encodeToCurve = /* @__PURE__ */ (() => htf.encodeToCurve)();\n"],"names":["number","n","Number","isSafeInteger","Error","bytes","b","Uint8Array","_len","arguments","length","lengths","Array","_key","includes","assert","bool","hash","create","outputLen","blockLen","exists","instance","checkFinished","undefined","destroyed","finished","output","out","min","crypto","globalThis","u8a","a","createView","arr","DataView","buffer","byteOffset","byteLength","rotr","word","shift","Uint32Array","from","v","i","toString","padStart","toBytes","data","str","TextEncoder","encode","utf8ToBytes","Hash","clone","this","_cloneInto","wrapConstructor","hashCons","hashC","msg","update","digest","tmp","randomBytes","bytesLength","getRandomValues","SHA2","constructor","padOffset","isLE","super","pos","view","len","take","Math","set","subarray","process","dataView","roundClean","digestInto","fill","value","setBigUint64","_32n","BigInt","_u32_max","wh","wl","h","l","setUint32","oview","outLen","state","get","res","slice","destroy","to","Maj","c","SHA256_K","IV","SHA256_W","SHA256","A","B","C","D","E","F","G","H","offset","getUint32","W15","W2","s0","s1","T1","T2","Chi","SHA224","sha256","_0n","_1n","_2n","_3n","_4n","_5n","_8n","mod","result","pow","num","power","modulo","pow2","x","invert","y","u","q","r","m","FpSqrt","P","p1div4","Fp","root","eql","sqr","c1","n2","mul","nv","sub","ONE","legendreC","Q","S","Z","Q1div2","neg","g","ZERO","t2","ge","tonelliShanks","FIELD_FIELDS","nLength","nBitLength","_nBitLength","nByteLength","ceil","validateBasic","curve","field","opts","reduce","map","val","ORDER","MASK","BYTES","BITS","validateObject","validateField","Gx","Gy","Object","freeze","p","bytesToNumberBE","b2n","hexToBytes","h2b","ut","DER","Err","_parseInt","d","toSig","hex","sBytes","s","rBytesLeft","hexFromSig","sig","parseInt","shl","rhl","sl","rl","weierstrassPoints","CURVE","allowedPrivateKeyLengths","wrapPrivateKey","isTorsionFree","clearCofactor","allowInfinityPoint","fromBytes","endo","beta","splitScalar","validatePointOpts","point","isCompressed","toAffine","tail","weierstrassEquation","x2","x3","add","isWithinCurveOrder","assertGE","normPrivateKeyToScalar","key","ensureBytes","error","pointPrecomputes","Map","assertPrjPoint","other","Point","px","py","pz","isValid","static","is0","points","toInv","invertBatch","fromAffine","assertValidity","privateKey","BASE","multiply","_setWindowSize","windowSize","_WINDOW_SIZE","delete","left","right","hasEvenY","isOdd","equals","X1","Y1","Z1","X2","Y2","Z2","U1","U2","negate","double","b3","X3","Y3","Z3","t0","t1","t3","t4","t5","subtract","wNAF","wnaf","wNAFCached","comp","multiplyUnsafe","I","unsafeLadder","k1neg","k1","k2neg","k2","k1p","k2p","scalar","fake","f","f1p","f2p","constTimeNegate","normalizeZ","multiplyAndAddUnsafe","sum","iz","z","inv","ax","ay","zz","cofactor","toRawBytes","toHex","_bits","bits","condition","item","W","windows","elm","precomputeWindow","base","window","push","precomputes","mask","maxNumber","shiftBy","wbits","offset1","offset2","abs","cond1","cond2","precomputesMap","transform","ProjectivePoint","weierstrass","curveDef","hmac","bits2int","bits2int_modN","lowS","validateOpts","CURVE_ORDER","compressedLen","uncompressedLen","modN","invN","cat","head","y2","sqrt","numToNByteStr","isBiggerThanHalfOrder","slcNum","Signature","recovery","addRecoveryBit","recoverPublicKey","msgHash","rec","radj","prefix","R","fromHex","ir","u1","u2","hasHighS","normalizeS","toDERRawBytes","toDERHex","toCompactRawBytes","toCompactHex","utils","isValidPrivateKey","randomPrivateKey","groupOrder","hashLen","minLen","bytesToNumberLE","precompute","isProbPub","delta","ORDER_MASK","int2octets","prepSig","defaultSigOpts","some","k","prehash","extraEntropy","ent","h1int","seedArgs","e","seed","k2sig","kBytes","ik","normS","defaultVerOpts","getPublicKey","fromPrivateKey","getSharedSecret","privateA","publicB","sign","privKey","drbg","verify","signature","publicKey","_Point$BASE$multiplyA","sg","_sig","fromDER","derError","fromCompact","message","is","HMAC","iHash","pad","oHash","buf","getPrototypeOf","getHash","msgs","arrays","forEach","concatBytes","secp256k1P","secp256k1N","divNearest","sqrtMod","_6n","_11n","_22n","_23n","_44n","_88n","b2","b6","b9","b11","b22","b44","b88","b176","b220","b223","bitLen","redef","sqrtP","bitMask","lhs","rhs","FpPow","div","sqrN","addN","subN","mulN","lst","nums","lastMultiplied","acc","inverted","reduceRight","FpInvertBatch","cmov","numberToBytesLE","numberToBytesBE","Field","secp256k1","defHash","createCurve","a1","b1","a2","POW_2_128","c2"],"sourceRoot":""}